import { createQueryKeys } from '@lukemorales/query-key-factory';
import { isNil } from 'lodash-es';

import {
  getCloudComplianceApiClient,
  getComplianceApiClient,
  getMalwareApiClient,
  getSearchApiClient,
  getSecretApiClient,
  getVulnerabilityApiClient,
} from '@/api/api';
import {
  ModelNodeIdentifierNodeTypeEnum,
  ModelScanInfo,
  ModelScanResultsReq,
  SearchSearchScanReq,
} from '@/api/generated';
import { ScanStatusEnum, ScanTypeEnum } from '@/types/common';
import { apiWrapper } from '@/utils/api';

export const vulnerabilityQueries = createQueryKeys('vulnerability', {
  scanList: (filters: {
    page?: number;
    nodeTypes?: string[];
    sortBy?: string | null;
    descending?: boolean;
    status?: string[];
    hosts?: string[];
    containers?: string[];
    images?: string[];
    languages?: string[];
    clusters?: string[];
    pageSize: number;
  }) => {
    const {
      page = 1,
      nodeTypes = [],
      sortBy,
      descending,
      status,
      hosts,
      containers,
      images,
      languages,
      clusters,
      pageSize,
    } = filters;
    return {
      queryKey: [{ filters }],
      queryFn: async () => {
        type ScanResult = ModelScanInfo & {
          total: number;
          critical: number;
          high: number;
          medium: number;
          low: number;
          unknown: number;
        };
        const results: {
          scans: ScanResult[];
          currentPage: number;
          totalRows: number;
          message?: string;
        } = {
          scans: [],
          currentPage: 1,
          totalRows: 0,
        };

        const scanFilters = {} as {
          status?: string[];
        };

        if (status && status.length > 0) {
          scanFilters.status = status;
        }

        const nodeFilters = {
          node_type: nodeTypes,
        } as {
          status?: string[];
          node_type?: string[];
          node_id?: string[];
          kubernetes_cluster_id?: string[];
        };
        if (hosts && hosts?.length > 0) {
          nodeFilters.node_id = nodeFilters.node_id
            ? nodeFilters.node_id.concat(hosts)
            : hosts;
        }
        if (containers && containers?.length > 0) {
          nodeFilters.node_id = nodeFilters.node_id
            ? nodeFilters.node_id.concat(containers)
            : containers;
        }
        if (images && images?.length > 0) {
          nodeFilters.node_id = nodeFilters.node_id
            ? nodeFilters.node_id.concat(images)
            : images;
        }

        if (clusters && clusters?.length > 0) {
          nodeFilters.kubernetes_cluster_id = clusters;
        }

        const languageFilters = {} as {
          trigger_action: string[];
        };
        if (languages && languages.length > 0) {
          languageFilters.trigger_action = languages.map((language) =>
            language.toLowerCase(),
          );
        }
        const scanRequestParams: SearchSearchScanReq = {
          node_filters: {
            filters: {
              match_filter: { filter_in: {} },
              order_filter: { order_fields: [] },
              contains_filter: { filter_in: { ...nodeFilters } },
              compare_filter: null,
            },
            in_field_filter: null,
            window: {
              offset: 0,
              size: 0,
            },
          },
          scan_filters: {
            filters: {
              match_filter: { filter_in: {} },
              order_filter: {
                order_fields: [
                  {
                    descending: true,
                    field_name: 'updated_at',
                  },
                ],
              },
              contains_filter: { filter_in: { ...languageFilters, ...scanFilters } },
              compare_filter: null,
            },
            in_field_filter: null,
            window: {
              offset: 0,
              size: 1,
            },
          },
          window: { offset: page * pageSize, size: pageSize },
        };
        if (sortBy && !isNil(descending)) {
          scanRequestParams.scan_filters.filters.order_filter.order_fields = [
            {
              field_name: sortBy,
              descending: descending,
            },
          ];
        } else {
          scanRequestParams.scan_filters.filters.order_filter.order_fields = [
            {
              field_name: 'updated_at',
              descending: true,
            },
          ];
        }
        const searchVulnerabilityScanApi = apiWrapper({
          fn: getSearchApiClient().searchVulnerabilityScan,
        });
        const result = await searchVulnerabilityScanApi({
          searchSearchScanReq: scanRequestParams,
        });
        if (!result.ok) {
          throw result.error;
        }

        const countsResultApi = apiWrapper({
          fn: getSearchApiClient().searchVulnerabilityScanCount,
        });
        const countsResult = await countsResultApi({
          searchSearchScanReq: {
            ...scanRequestParams,
            window: {
              ...scanRequestParams.window,
              size: 10 * scanRequestParams.window.size,
            },
          },
        });
        if (!countsResult.ok) {
          throw countsResult.error;
        }

        if (result.value === null) {
          return results;
        }

        results.scans = result.value.map((scan) => {
          const severities = scan.severity_counts as {
            critical: number;
            high: number;
            medium: number;
            low: number;
            unknown: number;
          };
          severities.critical = severities.critical ?? 0;
          severities.high = severities.high ?? 0;
          severities.medium = severities.medium ?? 0;
          severities.low = severities.low ?? 0;
          severities.unknown = severities.unknown ?? 0;

          return {
            ...scan,
            total:
              severities.critical +
              severities.high +
              severities.medium +
              severities.low +
              severities.unknown,
            critical: severities.critical,
            high: severities.high,
            medium: severities.medium,
            low: severities.low,
            unknown: severities.unknown,
          };
        });

        results.currentPage = page;
        results.totalRows = page * pageSize + countsResult.value.count;

        return results;
      },
    };
  },
  scanResults: (filters: {
    scanId: string;
    page: number;
    pageSize: number;
    severity: string[];
    visibility: string[];
    order?: {
      sortBy: string;
      descending: boolean;
    };
  }) => {
    return {
      queryKey: [{ filters }],
      queryFn: async () => {
        const { scanId, visibility, severity, page, order, pageSize } = filters;
        // status api
        const statusVulnerabilityScanApi = apiWrapper({
          fn: getVulnerabilityApiClient().statusVulnerabilityScan,
        });
        const searchVulnerabilitiesResponse = await statusVulnerabilityScanApi({
          modelScanStatusReq: {
            scan_ids: [scanId],
            bulk_scan_id: '',
          },
        });
        if (!searchVulnerabilitiesResponse.ok) {
          if (searchVulnerabilitiesResponse.error.response.status === 400) {
            return { message: searchVulnerabilitiesResponse.error.message };
          }
          throw searchVulnerabilitiesResponse.error;
        }

        if (
          !searchVulnerabilitiesResponse ||
          !searchVulnerabilitiesResponse.value?.statuses?.[scanId]
        ) {
          throw new Error('Scan status not found');
        }

        const scanStatus = searchVulnerabilitiesResponse.value?.statuses?.[scanId].status;

        const isScanRunning =
          scanStatus !== ScanStatusEnum.complete && scanStatus !== ScanStatusEnum.error;
        const isScanError = scanStatus === ScanStatusEnum.error;

        if (isScanRunning || isScanError) {
          return {
            scanStatusResult: searchVulnerabilitiesResponse.value.statuses[scanId],
          };
        }

        const scanResultsReq: ModelScanResultsReq = {
          fields_filter: {
            contains_filter: {
              filter_in: {},
            },
            match_filter: { filter_in: {} },
            order_filter: { order_fields: [] },
            compare_filter: null,
          },
          scan_id: scanId,
          window: {
            offset: page * pageSize,
            size: pageSize,
          },
        };

        if (severity.length) {
          scanResultsReq.fields_filter.contains_filter.filter_in!['cve_severity'] =
            severity;
        }

        if (visibility.length === 1) {
          scanResultsReq.fields_filter.contains_filter.filter_in!['masked'] = [
            visibility.includes('masked') ? true : false,
          ];
        }

        if (order) {
          scanResultsReq.fields_filter.order_filter.order_fields?.push({
            field_name: order.sortBy,
            descending: order.descending,
          });
        }

        const resultVulnerabilityScanApi = apiWrapper({
          fn: getVulnerabilityApiClient().resultVulnerabilityScan,
        });
        const resultVulnerabilityScanResponse = await resultVulnerabilityScanApi({
          modelScanResultsReq: scanResultsReq,
        });

        if (!resultVulnerabilityScanResponse.ok) {
          throw resultVulnerabilityScanResponse.error;
        }

        if (resultVulnerabilityScanResponse.value === null) {
          // TODO: handle this case with 404 status maybe
          throw new Error('Error getting scan results');
        }
        const totalSeverity = Object.values(
          resultVulnerabilityScanResponse.value.severity_counts ?? {},
        ).reduce((acc, value) => {
          acc = acc + value;
          return acc;
        }, 0);

        const resultCountVulnerabilityScanApi = apiWrapper({
          fn: getVulnerabilityApiClient().resultCountVulnerabilityScan,
        });
        const resultCounts = await resultCountVulnerabilityScanApi({
          modelScanResultsReq: {
            ...scanResultsReq,
            window: {
              ...scanResultsReq.window,
              size: 10 * scanResultsReq.window.size,
            },
          },
        });

        if (!resultCounts.ok) {
          throw resultCounts.error;
        }

        return {
          scanStatusResult: searchVulnerabilitiesResponse.value.statuses[scanId],
          data: {
            totalSeverity,
            severityCounts: {
              critical:
                resultVulnerabilityScanResponse.value.severity_counts?.['critical'] ?? 0,
              high: resultVulnerabilityScanResponse.value.severity_counts?.['high'] ?? 0,
              medium:
                resultVulnerabilityScanResponse.value.severity_counts?.['medium'] ?? 0,
              low: resultVulnerabilityScanResponse.value.severity_counts?.['low'] ?? 0,
              unknown:
                resultVulnerabilityScanResponse.value.severity_counts?.['unknown'] ?? 0,
            },
            timestamp: resultVulnerabilityScanResponse.value.updated_at,
            tableData: resultVulnerabilityScanResponse.value.vulnerabilities ?? [],
            pagination: {
              currentPage: page,
              totalRows: page * pageSize + resultCounts.value.count,
            },
          },
        };
      },
    };
  },
  scanHistories: (filters: {
    nodeId: string;
    nodeType: string;
    scanType: ScanTypeEnum;
  }) => {
    const { nodeId, nodeType, scanType } = filters;
    return {
      queryKey: [{ filters }],
      queryFn: async () => {
        if (!nodeId || !nodeType || !scanType) {
          throw new Error('Scan Type, Node Type and Node Id are required');
        }

        const getScanHistory = apiWrapper({
          fn: {
            [ScanTypeEnum.VulnerabilityScan]:
              getVulnerabilityApiClient().listVulnerabilityScans,
            [ScanTypeEnum.SecretScan]: getSecretApiClient().listSecretScans,
            [ScanTypeEnum.MalwareScan]: getMalwareApiClient().listMalwareScans,
            [ScanTypeEnum.CloudComplianceScan]:
              getCloudComplianceApiClient().listCloudComplianceScan,
            [ScanTypeEnum.ComplianceScan]: getComplianceApiClient().listComplianceScan,
          }[scanType],
        });

        const result = await getScanHistory({
          modelScanListReq: {
            fields_filter: {
              contains_filter: {
                filter_in: {},
              },
              match_filter: { filter_in: {} },
              order_filter: { order_fields: [] },
              compare_filter: null,
            },
            node_ids: [
              {
                node_id: nodeId.toString(),
                node_type: nodeType.toString() as ModelNodeIdentifierNodeTypeEnum,
              },
            ],
            window: {
              offset: 0,
              size: Number.MAX_SAFE_INTEGER,
            },
          },
        });

        if (!result.ok) {
          console.error(result.error);
          return {
            error: 'Error getting scan history',
            message: result.error.message,
            data: [],
          };
        }

        if (!result.value.scans_info) {
          return {
            data: [],
          };
        }

        return {
          data: result.value.scans_info?.map((res) => {
            return {
              updatedAt: res.updated_at,
              scanId: res.scan_id,
              status: res.status,
            };
          }),
        };
      },
    };
  },
});

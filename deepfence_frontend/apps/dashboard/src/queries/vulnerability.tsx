import { createQueryKeyStore } from '@lukemorales/query-key-factory';
import { isNil } from 'lodash-es';

import { getSearchApiClient } from '@/api/api';
import { ModelScanInfo, SearchSearchScanReq } from '@/api/generated';
import { queryClient } from '@/queries/client';
import { apiWrapper } from '@/utils/api';

export const vulnerabilityQueries = createQueryKeyStore({
  scan: {
    list: (filters: {
      page?: number;
      nodeTypes?: string[];
      sortBy?: string | null;
      descending?: boolean;
      status?: string[];
      hosts?: string[];
      containers?: string[];
      images?: string[];
      languages?: string[];
      clusters?: string[];
      pageSize: number;
    }) => {
      const {
        page = 1,
        nodeTypes = [],
        sortBy,
        descending,
        status,
        hosts,
        containers,
        images,
        languages,
        clusters,
        pageSize,
      } = filters;
      return {
        queryKey: [{ filters }],
        queryFn: async () => {
          type ScanResult = ModelScanInfo & {
            total: number;
            critical: number;
            high: number;
            medium: number;
            low: number;
            unknown: number;
          };
          const results: {
            scans: ScanResult[];
            currentPage: number;
            totalRows: number;
            message?: string;
          } = {
            scans: [],
            currentPage: 1,
            totalRows: 0,
          };

          const scanFilters = {} as {
            status?: string[];
          };

          if (status && status.length > 0) {
            scanFilters.status = status;
          }

          const nodeFilters = {
            node_type: nodeTypes,
          } as {
            status?: string[];
            node_type?: string[];
            node_id?: string[];
            kubernetes_cluster_id?: string[];
          };
          if (hosts && hosts?.length > 0) {
            nodeFilters.node_id = nodeFilters.node_id
              ? nodeFilters.node_id.concat(hosts)
              : hosts;
          }
          if (containers && containers?.length > 0) {
            nodeFilters.node_id = nodeFilters.node_id
              ? nodeFilters.node_id.concat(containers)
              : containers;
          }
          if (images && images?.length > 0) {
            nodeFilters.node_id = nodeFilters.node_id
              ? nodeFilters.node_id.concat(images)
              : images;
          }

          if (clusters && clusters?.length > 0) {
            nodeFilters.kubernetes_cluster_id = clusters;
          }

          const languageFilters = {} as {
            trigger_action: string[];
          };
          if (languages && languages.length > 0) {
            languageFilters.trigger_action = languages.map((language) =>
              language.toLowerCase(),
            );
          }
          const scanRequestParams: SearchSearchScanReq = {
            node_filters: {
              filters: {
                match_filter: { filter_in: {} },
                order_filter: { order_fields: [] },
                contains_filter: { filter_in: { ...nodeFilters } },
                compare_filter: null,
              },
              in_field_filter: null,
              window: {
                offset: 0,
                size: 0,
              },
            },
            scan_filters: {
              filters: {
                match_filter: { filter_in: {} },
                order_filter: {
                  order_fields: [
                    {
                      descending: true,
                      field_name: 'updated_at',
                    },
                  ],
                },
                contains_filter: { filter_in: { ...languageFilters, ...scanFilters } },
                compare_filter: null,
              },
              in_field_filter: null,
              window: {
                offset: 0,
                size: 1,
              },
            },
            window: { offset: page * pageSize, size: pageSize },
          };
          if (sortBy && !isNil(descending)) {
            scanRequestParams.scan_filters.filters.order_filter.order_fields = [
              {
                field_name: sortBy,
                descending: descending,
              },
            ];
          } else {
            scanRequestParams.scan_filters.filters.order_filter.order_fields = [
              {
                field_name: 'updated_at',
                descending: true,
              },
            ];
          }
          const searchVulnerabilityScanApi = apiWrapper({
            fn: getSearchApiClient().searchVulnerabilityScan,
          });
          const result = await searchVulnerabilityScanApi({
            searchSearchScanReq: scanRequestParams,
          });
          if (!result.ok) {
            throw result.error;
          }

          const countsResultApi = apiWrapper({
            fn: getSearchApiClient().searchVulnerabilityScanCount,
          });
          const countsResult = await countsResultApi({
            searchSearchScanReq: {
              ...scanRequestParams,
              window: {
                ...scanRequestParams.window,
                size: 10 * scanRequestParams.window.size,
              },
            },
          });
          if (!countsResult.ok) {
            throw countsResult.error;
          }

          if (result.value === null) {
            return results;
          }

          results.scans = result.value.map((scan) => {
            const severities = scan.severity_counts as {
              critical: number;
              high: number;
              medium: number;
              low: number;
              unknown: number;
            };
            severities.critical = severities.critical ?? 0;
            severities.high = severities.high ?? 0;
            severities.medium = severities.medium ?? 0;
            severities.low = severities.low ?? 0;
            severities.unknown = severities.unknown ?? 0;

            return {
              ...scan,
              total:
                severities.critical +
                severities.high +
                severities.medium +
                severities.low +
                severities.unknown,
              critical: severities.critical,
              high: severities.high,
              medium: severities.medium,
              low: severities.low,
              unknown: severities.unknown,
            };
          });

          results.currentPage = page;
          results.totalRows = page * pageSize + countsResult.value.count;

          return results;
        },
      };
    },
  },
});

export function invalidateVulnerabilityScansQuery() {
  return queryClient.invalidateQueries({
    queryKey: [vulnerabilityQueries.scan.list._def],
  });
}

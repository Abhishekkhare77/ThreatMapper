import { cloneDeepWith } from 'lodash-es';
import { useEffect, useState } from 'react';
import { ActionFunctionArgs, generatePath, redirect, useFetcher } from 'react-router-dom';
import { toast } from 'sonner';
import { Button, Checkbox, Radio, Switch, TextInput } from 'ui-components';

import { getVulnerabilityApiClient } from '@/api/api';
import {
  ApiDocsBadRequestResponse,
  ModelNodeIdentifierNodeTypeEnum,
  ModelVulnerabilityScanConfigLanguageLanguageEnum,
  ModelVulnerabilityScanTriggerReq,
} from '@/api/generated';
import { ApiError, makeRequest } from '@/utils/api';

const packages = [
  // {
  //   name: 'OS Packages',
  //   checked: false,
  //   value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Base,
  // },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Dotnet,
  },
];
type ScanConfigureFormProps = {
  wantAdvanceOptions: boolean;
  data: {
    urlIds: string[];
    urlType: string;
  };
  onSuccess: () => void;
};

export type ScanActionReturnType = {
  message?: string;
  success: boolean;
};

export const scanVulnerabilityApiAction = async ({
  request,
}: ActionFunctionArgs): Promise<ScanActionReturnType | null> => {
  const formData = await request.formData();
  const nodeIds = formData.get('_nodeIds')?.toString().split(',') ?? [];
  const nodeType = formData.get('_nodeType')?.toString() ?? '';
  const selectAll = formData.get('selectAll')?.toString() ?? '';
  const scanInterval = formData.get('scanInterval')?.toString() ?? '';
  const scanEveryday = formData.get('scanEveryday')?.toString() ?? '';
  const scanTag = formData.get('scanTag')?.toString() ?? '';
  const priorityScan = formData.get('priorityScan')?.toString() ?? '';
  const packages = formData.getAll('packages');

  const requestBody: ModelVulnerabilityScanTriggerReq = {
    filters: {
      cloud_account_scan_filter: { filter_in: null },
      kubernetes_cluster_scan_filter: { filter_in: null },
      container_scan_filter: { filter_in: null },
      host_scan_filter: { filter_in: null },
      image_scan_filter: { filter_in: null },
    },
    node_ids: nodeIds.map((nodeId) => ({
      node_id: nodeId,
      node_type: (nodeType === 'kubernetes_cluster'
        ? 'cluster'
        : nodeType) as ModelNodeIdentifierNodeTypeEnum,
    })),
    scan_config:
      selectAll === 'all'
        ? [
            {
              language: ModelVulnerabilityScanConfigLanguageLanguageEnum.All,
            },
          ]
        : packages.map((pkg) => ({
            language: pkg as unknown as ModelVulnerabilityScanConfigLanguageLanguageEnum,
          })),
  };

  const r = await makeRequest({
    apiFunction: getVulnerabilityApiClient().startVulnerabilityScan,
    apiArgs: [
      {
        modelVulnerabilityScanTriggerReq: requestBody,
      },
    ],
    errorHandler: async (r) => {
      const error = new ApiError<ScanActionReturnType>({ success: false });
      if (r.status === 400 || r.status === 409) {
        const modelResponse: ApiDocsBadRequestResponse = await r.json();
        return error.set({
          message: modelResponse.message ?? '',
          success: false,
        });
      }
    },
  });

  if (ApiError.isApiError(r)) {
    return r.value();
  }

  if (request.url.includes('onboard')) {
    throw redirect(
      generatePath('/onboard/scan/view-summary/running/:nodeType/:scanType/:bulkScanId', {
        nodeType,
        scanType: 'vulnerability',
        bulkScanId: r.bulk_scan_id,
      }),
      302,
    );
  }
  toast('Scan has been sucessfully started');
  return {
    success: true,
  };
};

const VulnerabilityScanAdvanceOptionForm = () => {
  const [priorityScan, setPriorityScan] = useState(false);
  const [autoCheckandScan, setAutoCheckandScan] = useState(false);
  const [scanTag, setScanTag] = useState('last');
  return (
    <div>
      <h6 className={'text-md font-medium dark:text-white mt-6'}>Advanced Options</h6>
      <div className="mt-4 flex flex-col gap-y-6">
        <Checkbox
          name="priorityScan"
          label="Priority Scan"
          checked={priorityScan}
          onCheckedChange={(checked: boolean) => {
            setPriorityScan(checked);
          }}
        />
        <Radio
          name="scanTag"
          value={scanTag}
          options={[
            { label: 'Scan last pushed tag', value: 'recent' },
            { label: 'Scan by "latest" tag', value: 'last' },
            { label: 'Scan all image tags', value: 'all' },
          ]}
          onValueChange={(value) => {
            setScanTag(value);
          }}
        />
        <TextInput
          className="min-[200px] max-w-xs"
          label="Scan interval in days (optional)"
          type={'text'}
          sizing="sm"
          name="scanInterval"
          placeholder=""
        />
        <Checkbox
          name="scanEveryday"
          label="Check and scan for new images every day"
          checked={autoCheckandScan}
          onCheckedChange={(checked: boolean) => {
            setAutoCheckandScan(checked);
          }}
        />
      </div>
    </div>
  );
};

export const VulnerabilityScanConfigureForm = ({
  data,
  onSuccess,
  wantAdvanceOptions,
}: ScanConfigureFormProps) => {
  const [pkgs, setSelectPackages] = useState(packages);
  const [isSelectAll, setIsSelectAll] = useState(false);
  const fetcher = useFetcher<ScanActionReturnType>();
  const { state, data: fetcherData } = fetcher;

  useEffect(() => {
    if (fetcherData?.success) {
      onSuccess();
    }
  }, [fetcherData]);

  useEffect(() => {
    if (isSelectAll) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = true;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  }, [isSelectAll]);

  // select all switch
  const onSwitchChange = (checked: boolean) => {
    setIsSelectAll(checked);
    if (!checked) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = false;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  };

  // packages checkbox
  const onPackageCheckedChange = (
    pkg: {
      name: string;
      checked: boolean;
    },
    checked: boolean,
  ) => {
    if (checked === false) {
      setIsSelectAll(false);
    } else if (pkgs.filter((pkg) => pkg.checked === true).length === pkgs.length - 1) {
      setIsSelectAll(true);
    }
    setSelectPackages((state) => {
      const _newState = cloneDeepWith(state, (value) => {
        if (value.name === pkg.name) {
          return {
            ...value,
            checked,
          };
        }
        return undefined;
      });

      return _newState;
    });
  };

  return (
    <fetcher.Form method="post" action="/data-component/scan/vulnerability">
      <input type="text" name="_nodeIds" hidden readOnly value={data.urlIds.join(',')} />
      <input type="text" name="_nodeType" readOnly hidden value={data.urlType} />
      <p className="text-red-500 text-md py-3">{fetcherData?.message}</p>
      <div className="flex">
        <h6 className={'text-md font-medium dark:text-white'}>Packages</h6>
        <Button
          disabled={state === 'loading'}
          loading={state === 'loading'}
          size="sm"
          color="primary"
          className="ml-auto"
          type="submit"
        >
          Start Scan
        </Button>
      </div>
      <div className="mt-2">
        <Switch
          label="Select All"
          size="sm"
          name="selectAll"
          value="all"
          onCheckedChange={onSwitchChange}
          checked={isSelectAll}
        />
      </div>

      <div className="flex flex-row mt-4 gap-5">
        {pkgs.map((pkg) => {
          return (
            <Checkbox
              label={pkg.name}
              key={pkg.name}
              name="packages"
              value={pkg.value}
              checked={isSelectAll ? true : pkg.checked}
              onCheckedChange={(checked: boolean) => {
                onPackageCheckedChange(pkg, checked);
              }}
            />
          );
        })}
      </div>

      {wantAdvanceOptions && <VulnerabilityScanAdvanceOptionForm />}
    </fetcher.Form>
  );
};

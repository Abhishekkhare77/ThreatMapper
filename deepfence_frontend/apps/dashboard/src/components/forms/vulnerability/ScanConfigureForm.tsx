import { cloneDeepWith } from 'lodash-es';
import { useEffect, useState } from 'react';
import { Button, Checkbox, Switch } from 'ui-components';

import { ModelVulnerabilityScanConfigLanguageLanguageEnum } from '@/api/generated';

const packages = [
  // {
  //   name: 'OS Packages',
  //   checked: false,
  //   value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Base,
  // },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Dotnet,
  },
];
type ScanConfigureFormProps = {
  loading: boolean;
  data: {
    urlIds: string[];
    urlType: string;
  };
};
export const ScanConfigureForm = ({ loading, data }: ScanConfigureFormProps) => {
  const [pkgs, setSelectPackages] = useState(packages);
  const [isSelectAll, setIsSelectAll] = useState(false);

  useEffect(() => {
    if (isSelectAll) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = true;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  }, [isSelectAll]);

  // select all switch
  const onSwitchChange = (checked: boolean) => {
    setIsSelectAll(checked);
    if (!checked) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = false;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  };

  // packages checkbox
  const onPackageCheckedChange = (
    pkg: {
      name: string;
      checked: boolean;
    },
    checked: boolean,
  ) => {
    if (checked === false) {
      setIsSelectAll(false);
    } else if (pkgs.filter((pkg) => pkg.checked === true).length === pkgs.length - 1) {
      setIsSelectAll(true);
    }
    setSelectPackages((state) => {
      const _newState = cloneDeepWith(state, (value) => {
        if (value.name === pkg.name) {
          return {
            ...value,
            checked,
          };
        }
        return undefined;
      });

      return _newState;
    });
  };

  return (
    <div>
      <input type="text" name="_nodeIds" hidden readOnly value={data.urlIds.join(',')} />
      <input type="text" name="_nodeType" readOnly hidden value={data.urlType} />
      <div className="flex">
        <h6 className={'text-lg font-medium mt-0 dark:text-white'}>Packages</h6>
        <Button
          disabled={loading}
          loading={loading}
          size="sm"
          color="primary"
          className="ml-auto"
          type="submit"
        >
          Start Scan
        </Button>
      </div>
      <div className="mt-4">
        <Switch
          label="Select All"
          size="sm"
          name="selectAll"
          value="all"
          onCheckedChange={onSwitchChange}
          checked={isSelectAll}
        />
      </div>

      <div className="flex flex-row mt-4 gap-5">
        {pkgs.map((pkg) => {
          return (
            <Checkbox
              label={pkg.name}
              key={pkg.name}
              name="packages"
              value={pkg.value}
              checked={isSelectAll ? true : pkg.checked}
              onCheckedChange={(checked: boolean) => {
                onPackageCheckedChange(pkg, checked);
              }}
            />
          );
        })}
      </div>
    </div>
  );
};

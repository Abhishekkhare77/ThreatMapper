/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DetailedParent } from './DetailedParent';
import {
    DetailedParentFromJSON,
    DetailedParentFromJSONTyped,
    DetailedParentToJSON,
} from './DetailedParent';
import type { ReportMetadataRow } from './ReportMetadataRow';
import {
    ReportMetadataRowFromJSON,
    ReportMetadataRowFromJSONTyped,
    ReportMetadataRowToJSON,
} from './ReportMetadataRow';
import type { ReportTable } from './ReportTable';
import {
    ReportTableFromJSON,
    ReportTableFromJSONTyped,
    ReportTableToJSON,
} from './ReportTable';

/**
 * 
 * @export
 * @interface DetailedNodeSummary
 */
export interface DetailedNodeSummary {
    /**
     * 
     * @type {Array<string>}
     * @memberof DetailedNodeSummary
     */
    adjacency?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    immediate_parent_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    labelMinor?: string;
    /**
     * 
     * @type {Array<ReportMetadataRow>}
     * @memberof DetailedNodeSummary
     */
    metadata?: Array<ReportMetadataRow>;
    /**
     * 
     * @type {Array<object>}
     * @memberof DetailedNodeSummary
     */
    metrics?: Array<object>;
    /**
     * 
     * @type {Array<DetailedParent>}
     * @memberof DetailedNodeSummary
     */
    parents?: Array<DetailedParent>;
    /**
     * 
     * @type {boolean}
     * @memberof DetailedNodeSummary
     */
    pseudo?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    rank?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    shape?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DetailedNodeSummary
     */
    stack?: boolean;
    /**
     * 
     * @type {Array<ReportTable>}
     * @memberof DetailedNodeSummary
     */
    tables?: Array<ReportTable>;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    tag?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedNodeSummary
     */
    type?: string;
}

/**
 * Check if a given object implements the DetailedNodeSummary interface.
 */
export function instanceOfDetailedNodeSummary(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DetailedNodeSummaryFromJSON(json: any): DetailedNodeSummary {
    return DetailedNodeSummaryFromJSONTyped(json, false);
}

export function DetailedNodeSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetailedNodeSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adjacency': !exists(json, 'adjacency') ? undefined : json['adjacency'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'immediate_parent_id': !exists(json, 'immediate_parent_id') ? undefined : json['immediate_parent_id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'labelMinor': !exists(json, 'labelMinor') ? undefined : json['labelMinor'],
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(ReportMetadataRowFromJSON)),
        'metrics': !exists(json, 'metrics') ? undefined : json['metrics'],
        'parents': !exists(json, 'parents') ? undefined : ((json['parents'] as Array<any>).map(DetailedParentFromJSON)),
        'pseudo': !exists(json, 'pseudo') ? undefined : json['pseudo'],
        'rank': !exists(json, 'rank') ? undefined : json['rank'],
        'shape': !exists(json, 'shape') ? undefined : json['shape'],
        'stack': !exists(json, 'stack') ? undefined : json['stack'],
        'tables': !exists(json, 'tables') ? undefined : ((json['tables'] as Array<any>).map(ReportTableFromJSON)),
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function DetailedNodeSummaryToJSON(value?: DetailedNodeSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adjacency': value.adjacency,
        'id': value.id,
        'image': value.image,
        'immediate_parent_id': value.immediate_parent_id,
        'label': value.label,
        'labelMinor': value.labelMinor,
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(ReportMetadataRowToJSON)),
        'metrics': value.metrics,
        'parents': value.parents === undefined ? undefined : ((value.parents as Array<any>).map(DetailedParentToJSON)),
        'pseudo': value.pseudo,
        'rank': value.rank,
        'shape': value.shape,
        'stack': value.stack,
        'tables': value.tables === undefined ? undefined : ((value.tables as Array<any>).map(ReportTableToJSON)),
        'tag': value.tag,
        'type': value.type,
    };
}


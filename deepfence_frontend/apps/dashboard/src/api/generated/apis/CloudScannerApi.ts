/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  IngestersCloudCompliance,
  ModelCloudComplianceScanTriggerReq,
  ModelScanTriggerResp,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    IngestersCloudComplianceFromJSON,
    IngestersCloudComplianceToJSON,
    ModelCloudComplianceScanTriggerReqFromJSON,
    ModelCloudComplianceScanTriggerReqToJSON,
    ModelScanTriggerRespFromJSON,
    ModelScanTriggerRespToJSON,
} from '../models';

export interface IngestCloudCompliancesRequest {
    ingestersCloudCompliance?: Array<IngestersCloudCompliance> | null;
}

export interface StartCloudComplianceScansRequest {
    modelCloudComplianceScanTriggerReq?: ModelCloudComplianceScanTriggerReq;
}

/**
 * CloudScannerApi - interface
 * 
 * @export
 * @interface CloudScannerApiInterface
 */
export interface CloudScannerApiInterface {
    /**
     * Ingest Cloud compliances found while scanning cloud provider
     * @summary Ingest Cloud Compliances
     * @param {Array<IngestersCloudCompliance>} [ingestersCloudCompliance] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudScannerApiInterface
     */
    ingestCloudCompliancesRaw(requestParameters: IngestCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Ingest Cloud compliances found while scanning cloud provider
     * Ingest Cloud Compliances
     */
    ingestCloudCompliances(requestParameters: IngestCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Start Cloud Compliance Scans on cloud nodes
     * @summary Start Cloud Compliance Scans
     * @param {ModelCloudComplianceScanTriggerReq} [modelCloudComplianceScanTriggerReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudScannerApiInterface
     */
    startCloudComplianceScansRaw(requestParameters: StartCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanTriggerResp>>;

    /**
     * Start Cloud Compliance Scans on cloud nodes
     * Start Cloud Compliance Scans
     */
    startCloudComplianceScans(requestParameters: StartCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanTriggerResp>;

}

/**
 * 
 */
export class CloudScannerApi extends runtime.BaseAPI implements CloudScannerApiInterface {

    /**
     * Ingest Cloud compliances found while scanning cloud provider
     * Ingest Cloud Compliances
     */
    async ingestCloudCompliancesRaw(requestParameters: IngestCloudCompliancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/ingest/cloud-compliance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ingestersCloudCompliance?.map(IngestersCloudComplianceToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ingest Cloud compliances found while scanning cloud provider
     * Ingest Cloud Compliances
     */
    async ingestCloudCompliances(requestParameters: IngestCloudCompliancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ingestCloudCompliancesRaw(requestParameters, initOverrides);
    }

    /**
     * Start Cloud Compliance Scans on cloud nodes
     * Start Cloud Compliance Scans
     */
    async startCloudComplianceScansRaw(requestParameters: StartCloudComplianceScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanTriggerResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/start/cloud-compliance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelCloudComplianceScanTriggerReqToJSON(requestParameters.modelCloudComplianceScanTriggerReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanTriggerRespFromJSON(jsonValue));
    }

    /**
     * Start Cloud Compliance Scans on cloud nodes
     * Start Cloud Compliance Scans
     */
    async startCloudComplianceScans(requestParameters: StartCloudComplianceScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanTriggerResp> {
        const response = await this.startCloudComplianceScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

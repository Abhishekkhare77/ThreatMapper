/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ControlsAgentControls,
  ModelAgentId,
  ModelAgentImageMetadata,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ControlsAgentControlsFromJSON,
    ControlsAgentControlsToJSON,
    ModelAgentIdFromJSON,
    ModelAgentIdToJSON,
    ModelAgentImageMetadataFromJSON,
    ModelAgentImageMetadataToJSON,
} from '../models';

export interface AddAgentVersionRequest {
    modelAgentImageMetadata?: ModelAgentImageMetadata;
}

export interface GetAgentControlsRequest {
    modelAgentId?: ModelAgentId;
}

export interface GetAgentInitControlsRequest {
    modelAgentId?: ModelAgentId;
}

/**
 * ControlsApi - interface
 * 
 * @export
 * @interface ControlsApiInterface
 */
export interface ControlsApiInterface {
    /**
     * Push new agent version
     * @summary Push new agent version
     * @param {ModelAgentImageMetadata} [modelAgentImageMetadata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApiInterface
     */
    addAgentVersionRaw(requestParameters: AddAgentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Push new agent version
     * Push new agent version
     */
    addAgentVersion(requestParameters: AddAgentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Fetch actions for a given agent
     * @summary Fetch Agent Actions
     * @param {ModelAgentId} [modelAgentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApiInterface
     */
    getAgentControlsRaw(requestParameters: GetAgentControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControlsAgentControls>>;

    /**
     * Fetch actions for a given agent
     * Fetch Agent Actions
     */
    getAgentControls(requestParameters: GetAgentControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControlsAgentControls>;

    /**
     * Fetch initial actions for a given agent after it started
     * @summary Fetch Agent Init Actions
     * @param {ModelAgentId} [modelAgentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApiInterface
     */
    getAgentInitControlsRaw(requestParameters: GetAgentInitControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControlsAgentControls>>;

    /**
     * Fetch initial actions for a given agent after it started
     * Fetch Agent Init Actions
     */
    getAgentInitControls(requestParameters: GetAgentInitControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControlsAgentControls>;

    /**
     * Fetch latest agent version to check for upgrade
     * @summary Fetch latest agent version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApiInterface
     */
    getLatestAgentVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAgentImageMetadata>>;

    /**
     * Fetch latest agent version to check for upgrade
     * Fetch latest agent version
     */
    getLatestAgentVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAgentImageMetadata>;

}

/**
 * 
 */
export class ControlsApi extends runtime.BaseAPI implements ControlsApiInterface {

    /**
     * Push new agent version
     * Push new agent version
     */
    async addAgentVersionRaw(requestParameters: AddAgentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/controls/agent-version`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelAgentImageMetadataToJSON(requestParameters.modelAgentImageMetadata),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Push new agent version
     * Push new agent version
     */
    async addAgentVersion(requestParameters: AddAgentVersionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAgentVersionRaw(requestParameters, initOverrides);
    }

    /**
     * Fetch actions for a given agent
     * Fetch Agent Actions
     */
    async getAgentControlsRaw(requestParameters: GetAgentControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControlsAgentControls>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/controls/agent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelAgentIdToJSON(requestParameters.modelAgentId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControlsAgentControlsFromJSON(jsonValue));
    }

    /**
     * Fetch actions for a given agent
     * Fetch Agent Actions
     */
    async getAgentControls(requestParameters: GetAgentControlsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControlsAgentControls> {
        const response = await this.getAgentControlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch initial actions for a given agent after it started
     * Fetch Agent Init Actions
     */
    async getAgentInitControlsRaw(requestParameters: GetAgentInitControlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControlsAgentControls>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/controls/agent-init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelAgentIdToJSON(requestParameters.modelAgentId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControlsAgentControlsFromJSON(jsonValue));
    }

    /**
     * Fetch initial actions for a given agent after it started
     * Fetch Agent Init Actions
     */
    async getAgentInitControls(requestParameters: GetAgentInitControlsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControlsAgentControls> {
        const response = await this.getAgentInitControlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch latest agent version to check for upgrade
     * Fetch latest agent version
     */
    async getLatestAgentVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAgentImageMetadata>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/controls/get-agent-version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAgentImageMetadataFromJSON(jsonValue));
    }

    /**
     * Fetch latest agent version to check for upgrade
     * Fetch latest agent version
     */
    async getLatestAgentVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAgentImageMetadata> {
        const response = await this.getLatestAgentVersionRaw(initOverrides);
        return await response.value();
    }

}

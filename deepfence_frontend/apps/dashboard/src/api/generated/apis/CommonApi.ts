/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ModelScanResultsActionRequest,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ModelScanResultsActionRequestFromJSON,
    ModelScanResultsActionRequestToJSON,
} from '../models';

export interface DeleteScanResultRequest {
    modelScanResultsActionRequest?: ModelScanResultsActionRequest;
}

export interface MaskScanResultRequest {
    modelScanResultsActionRequest?: ModelScanResultsActionRequest;
}

export interface NotifyScanResultRequest {
    modelScanResultsActionRequest?: ModelScanResultsActionRequest;
}

export interface UnmaskScanResultRequest {
    modelScanResultsActionRequest?: ModelScanResultsActionRequest;
}

/**
 * CommonApi - interface
 * 
 * @export
 * @interface CommonApiInterface
 */
export interface CommonApiInterface {
    /**
     * Delete scan results
     * @summary Delete Scans Results
     * @param {ModelScanResultsActionRequest} [modelScanResultsActionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApiInterface
     */
    deleteScanResultRaw(requestParameters: DeleteScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete scan results
     * Delete Scans Results
     */
    deleteScanResult(requestParameters: DeleteScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Mask scan results
     * @summary Mask Scans Results
     * @param {ModelScanResultsActionRequest} [modelScanResultsActionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApiInterface
     */
    maskScanResultRaw(requestParameters: MaskScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Mask scan results
     * Mask Scans Results
     */
    maskScanResult(requestParameters: MaskScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Notify scan results in connected integration channels
     * @summary Notify Scans Results
     * @param {ModelScanResultsActionRequest} [modelScanResultsActionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApiInterface
     */
    notifyScanResultRaw(requestParameters: NotifyScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Notify scan results in connected integration channels
     * Notify Scans Results
     */
    notifyScanResult(requestParameters: NotifyScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Unmask scan results
     * @summary Unmask Scans Results
     * @param {ModelScanResultsActionRequest} [modelScanResultsActionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApiInterface
     */
    unmaskScanResultRaw(requestParameters: UnmaskScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Unmask scan results
     * Unmask Scans Results
     */
    unmaskScanResult(requestParameters: UnmaskScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CommonApi extends runtime.BaseAPI implements CommonApiInterface {

    /**
     * Delete scan results
     * Delete Scans Results
     */
    async deleteScanResultRaw(requestParameters: DeleteScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/results/action/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanResultsActionRequestToJSON(requestParameters.modelScanResultsActionRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete scan results
     * Delete Scans Results
     */
    async deleteScanResult(requestParameters: DeleteScanResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteScanResultRaw(requestParameters, initOverrides);
    }

    /**
     * Mask scan results
     * Mask Scans Results
     */
    async maskScanResultRaw(requestParameters: MaskScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/results/action/mask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanResultsActionRequestToJSON(requestParameters.modelScanResultsActionRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mask scan results
     * Mask Scans Results
     */
    async maskScanResult(requestParameters: MaskScanResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.maskScanResultRaw(requestParameters, initOverrides);
    }

    /**
     * Notify scan results in connected integration channels
     * Notify Scans Results
     */
    async notifyScanResultRaw(requestParameters: NotifyScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/results/action/notify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanResultsActionRequestToJSON(requestParameters.modelScanResultsActionRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Notify scan results in connected integration channels
     * Notify Scans Results
     */
    async notifyScanResult(requestParameters: NotifyScanResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notifyScanResultRaw(requestParameters, initOverrides);
    }

    /**
     * Unmask scan results
     * Unmask Scans Results
     */
    async unmaskScanResultRaw(requestParameters: UnmaskScanResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/results/action/unmask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanResultsActionRequestToJSON(requestParameters.modelScanResultsActionRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unmask scan results
     * Unmask Scans Results
     */
    async unmaskScanResult(requestParameters: UnmaskScanResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unmaskScanResultRaw(requestParameters, initOverrides);
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Deepfence ThreatMapper
 * Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: community@deepfence.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocsBadRequestResponse,
  ApiDocsFailureResponse,
  ModelScanCompareReq,
  ModelScanComparison,
} from '../models';
import {
    ApiDocsBadRequestResponseFromJSON,
    ApiDocsBadRequestResponseToJSON,
    ApiDocsFailureResponseFromJSON,
    ApiDocsFailureResponseToJSON,
    ModelScanCompareReqFromJSON,
    ModelScanCompareReqToJSON,
    ModelScanComparisonFromJSON,
    ModelScanComparisonToJSON,
} from '../models';

export interface CompareScansRequest {
    modelScanCompareReq?: ModelScanCompareReq;
}

/**
 * ScanCompareApi - interface
 * 
 * @export
 * @interface ScanCompareApiInterface
 */
export interface ScanCompareApiInterface {
    /**
     * Compare scans between scan ids for a given scan type
     * @summary Compare Scans
     * @param {ModelScanCompareReq} [modelScanCompareReq] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanCompareApiInterface
     */
    compareScansRaw(requestParameters: CompareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanComparison>>;

    /**
     * Compare scans between scan ids for a given scan type
     * Compare Scans
     */
    compareScans(requestParameters: CompareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanComparison>;

}

/**
 * 
 */
export class ScanCompareApi extends runtime.BaseAPI implements ScanCompareApiInterface {

    /**
     * Compare scans between scan ids for a given scan type
     * Compare Scans
     */
    async compareScansRaw(requestParameters: CompareScansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelScanComparison>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deepfence/scan/results/compare`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelScanCompareReqToJSON(requestParameters.modelScanCompareReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelScanComparisonFromJSON(jsonValue));
    }

    /**
     * Compare scans between scan ids for a given scan type
     * Compare Scans
     */
    async compareScans(requestParameters: CompareScansRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelScanComparison> {
        const response = await this.compareScansRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

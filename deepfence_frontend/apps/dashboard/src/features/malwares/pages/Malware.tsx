import { Suspense } from 'react';
import { useLoaderData } from 'react-router-dom';

import { getMalwareApiClient, getSearchApiClient } from '@/api/api';
import {
  ModelContainer,
  ModelContainerImage,
  ModelHost,
  ModelNodeIdentifierNodeTypeEnum,
} from '@/api/generated';
import { TopNMalwareCard } from '@/features/malwares/components/landing/TopNMalwareCard';
import { TopNMalwareChartData } from '@/features/malwares/components/landing/TopNMalwareChart';
import { apiWrapper } from '@/utils/api';
import { typedDefer, TypedDeferredData } from '@/utils/router';
import { DFAwait } from '@/utils/suspense';

async function getTop5MalwareAssetsData(nodeType: 'image' | 'host' | 'container') {
  const getTop5Nodes = apiWrapper({
    fn: {
      [ModelNodeIdentifierNodeTypeEnum.Image]: getSearchApiClient().searchContainerImages,
      [ModelNodeIdentifierNodeTypeEnum.Host]: getSearchApiClient().searchHosts,
      [ModelNodeIdentifierNodeTypeEnum.Container]: getSearchApiClient().searchContainers,
    }[nodeType],
  });
  const top5Nodes = await getTop5Nodes({
    searchSearchNodeReq: {
      node_filter: {
        filters: {
          contains_filter: {
            filter_in: {
              pseudo: [false],
              active: [true],
            },
          },
          match_filter: {
            filter_in: {},
          },
          order_filter: {
            order_fields: [
              {
                field_name: 'malwares_count',
                descending: true,
              },
            ],
          },
          compare_filter: null,
        },
        in_field_filter: [],
        window: {
          offset: 0,
          size: 0,
        },
      },
      window: {
        offset: 0,
        size: 5,
      },
    },
  });
  if (!top5Nodes.ok) {
    throw top5Nodes.error;
  }

  const getTop5NodeScans = apiWrapper({ fn: getSearchApiClient().searchMalwaresScan });

  const top5NodeScans = await getTop5NodeScans({
    searchSearchScanReq: {
      node_filters: {
        filters: {
          compare_filter: [],
          contains_filter: { filter_in: {} },
          match_filter: { filter_in: {} },
          order_filter: { order_fields: [] },
          not_contains_filter: { filter_in: {} },
        },
        in_field_filter: [],
        window: { offset: 0, size: 0 },
      },
      scan_filters: {
        filters: {
          compare_filter: [],
          contains_filter: {
            filter_in: {
              node_id: top5Nodes.value
                .map((node) => node.malware_latest_scan_id)
                .filter((scanId) => {
                  return !!scanId?.length;
                }),
            },
          },
          match_filter: { filter_in: {} },
          order_filter: { order_fields: [] },
          not_contains_filter: { filter_in: {} },
        },
        in_field_filter: [],
        window: { offset: 0, size: 0 },
      },
      window: {
        offset: 0,
        size: 5,
      },
    },
  });

  if (!top5NodeScans.ok) {
    throw top5NodeScans.error;
  }

  return top5Nodes.value
    .map((node) => {
      const latestScan = top5NodeScans.value.find(
        (scan) => scan.node_id === node.node_id,
      );
      if (!latestScan) {
        return null;
      }
      return {
        name: latestScan.node_name,
        critical: latestScan.severity_counts?.critical ?? 0,
        high: latestScan.severity_counts?.high ?? 0,
        medium: latestScan.severity_counts?.medium ?? 0,
        low: latestScan.severity_counts?.low ?? 0,
        unknown: latestScan.severity_counts?.unknown ?? 0,
      };
    })
    .reduce<
      Array<{
        name: string;
        critical: number;
        high: number;
        medium: number;
        low: number;
        unknown: number;
      }>
    >((acc, curr) => {
      if (curr) {
        acc.push(curr);
      }
      return acc;
    }, []);
}

type LoaderData = {
  imageSeverityResults: Array<TopNMalwareChartData>;
  hostSeverityResults: Array<TopNMalwareChartData>;
  containerSeverityResults: Array<TopNMalwareChartData>;
};

const loader = async (): Promise<TypedDeferredData<LoaderData>> => {
  return typedDefer({
    imageSeverityResults: getTop5MalwareAssetsData('image'),
    hostSeverityResults: getTop5MalwareAssetsData('host'),
    containerSeverityResults: getTop5MalwareAssetsData('container'),
  });
};

const Malware = () => {
  const loaderData = useLoaderData() as LoaderData;
  return (
    <div>
      <div className="flex p-2 items-center w-full shadow bg-white dark:bg-gray-800 h-10">
        <span className="text-md font-medium text-gray-700 dark:text-gray-200">
          Malwares
        </span>
      </div>
      <div className="p-2 grid grid-cols-12 gap-2">
        <div className="col-span-4">
          <Suspense
            fallback={
              <TopNMalwareCard
                title="Top Malware Containers"
                link="/malware/scans?nodeType=container"
                data={[]}
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.containerSeverityResults}>
              {(resolvedData: LoaderData['containerSeverityResults']) => {
                return (
                  <TopNMalwareCard
                    title="Top Malware Containers"
                    link="/malware/scans?nodeType=container"
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>
        <div className="col-span-4">
          <Suspense
            fallback={
              <TopNMalwareCard
                title="Top Malware Hosts"
                link="/malware/scans?nodeType=host"
                data={[]}
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.hostSeverityResults}>
              {(resolvedData: LoaderData['hostSeverityResults']) => {
                return (
                  <TopNMalwareCard
                    title="Top Malware Hosts"
                    link="/malware/scans?nodeType=host"
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>
        <div className="col-span-4">
          <Suspense
            fallback={
              <TopNMalwareCard
                title="Top Malware Container Images"
                link="/malware/scans?nodeType=container_image"
                data={[]}
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.imageSeverityResults}>
              {(resolvedData: LoaderData['imageSeverityResults']) => {
                return (
                  <TopNMalwareCard
                    title="Top Malware Container Images"
                    link="/malware/scans?nodeType=container_image"
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>
      </div>
    </div>
  );
};

export const module = {
  loader,
  element: <Malware />,
};

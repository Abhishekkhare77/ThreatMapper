import { cloneDeepWith } from 'lodash-es';
import { useState } from 'react';
import { FaArrowRight } from 'react-icons/fa';
import { useFetcher } from 'react-router-dom';
import {
  Button,
  Checkbox,
  Radio,
  RowSelectionState,
  Switch,
  TextInput,
} from 'ui-components';

import { ModelVulnerabilityScanConfigLanguageLanguageEnum } from '@/api/generated';

const packages = [
  // {
  //   name: 'OS Packages',
  //   checked: false,
  //   value: ModelVulnerabilityScanConfigLanguageLanguageEnum.OsPackages,
  // },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Dotnet,
  },
];

export const VulnerabilityScanModal = ({
  selection,
  enableScanBy,
}: {
  selection: RowSelectionState;
  enableScanBy?: boolean;
}) => {
  const [pkgs, setSelectPackages] = useState(packages);
  const [isSelectAll, setIsSelectAll] = useState(false);
  const [priorityScan, setPriorityScan] = useState(false);
  const [autoCheckandScan, setAutoCheckandScan] = useState(false);
  const fetcher = useFetcher();

  // select all switch
  const onSwitchChange = (checked: boolean) => {
    setIsSelectAll(checked);
    if (!checked) {
      const newPkgs = pkgs.map((pkg) => {
        pkg.checked = false;
        return pkg;
      });
      setSelectPackages(newPkgs);
    }
  };

  // packages checkbox
  const onPackageCheckedChange = (
    pkg: {
      name: string;
      checked: boolean;
    },
    checked: boolean,
  ) => {
    if (!checked) {
      setIsSelectAll(false);
    } else if (pkgs.filter((pkg) => pkg.checked === true).length === pkgs.length - 1) {
      setIsSelectAll(true);
    }
    setSelectPackages((state) => {
      const _newState = cloneDeepWith(state, (value) => {
        if (value.name === pkg.name) {
          return {
            ...value,
            checked,
          };
        }
        return undefined;
      });

      return _newState;
    });
  };

  return (
    <div className="w-full subpixel-antialiased relative p-5 mt-2">
      <div className="flex text-sm font-semibold flex-col gap-4 ">
        Start a new vulnerability scan for the selected images
      </div>
      <fetcher.Form method="post">
        <div className="flex ml-2 mt-4 text-lg flex-col gap-4">
          Packages
          <Switch
            label="Select All"
            size="sm"
            name="selectAll"
            value="all"
            onCheckedChange={onSwitchChange}
            checked={isSelectAll}
          />
        </div>

        <div className="grid grid-cols-2 gap-2 mt-6">
          {pkgs.map((pkg) => {
            console.log('pkg', pkg);
            return (
              <div
                className="min-[200px] max-w-xs mt-2 ml-2 items-center gap-2"
                key={pkg.name}
              >
                <Checkbox
                  label={pkg.name}
                  key={pkg.name}
                  name="packages"
                  value={pkg.value}
                  checked={isSelectAll ? true : pkg.checked}
                  onCheckedChange={(checked: boolean) => {
                    onPackageCheckedChange(pkg, checked);
                  }}
                />
              </div>
            );
          })}
        </div>
        <div className="flex mt-4 flex-col gap-4">
          <Checkbox
            label="Priority Scan"
            checked={priorityScan}
            onCheckedChange={(checked: boolean) => {
              setPriorityScan(checked);
            }}
          />
        </div>
        {enableScanBy && (
          <div className="flex mt-6 flex-col gap-4">
            <Radio
              name="scanby"
              defaultChecked
              defaultValue="last"
              options={[
                { label: 'Scan last pushed tag', value: 'recent' },
                { label: 'Scan by "latest" tag', value: 'last' },
                { label: 'Scan all image tags', value: 'all' },
              ]}
              onValueChange={(value) => {
                console.log('value', value);
              }}
            />
          </div>
        )}
        <TextInput
          className="min-[200px] max-w-xs mt-6"
          label="Scan interval in days (optional)"
          type={'text'}
          sizing="sm"
          name="scanInterval"
          placeholder=""
        />
        <div className="flex mt-4 flex-col gap-4">
          <Checkbox
            label="Check and scan for new images every day"
            checked={autoCheckandScan}
            onCheckedChange={(checked: boolean) => {
              setAutoCheckandScan(checked);
            }}
          />
        </div>
        <Button
          color="primary"
          size="sm"
          className="grow w-full mt-12"
          endIcon={<FaArrowRight />}
          type="submit"
        >
          Scan Now
        </Button>
      </fetcher.Form>
    </div>
  );
};

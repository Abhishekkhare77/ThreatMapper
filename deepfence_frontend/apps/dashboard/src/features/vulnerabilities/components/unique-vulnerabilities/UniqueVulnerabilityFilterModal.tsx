import { RefObject } from 'react';
import { Form } from 'react-router-dom';
import {
  Button,
  Checkbox,
  ModalHeader,
  Select,
  SelectItem,
  SlidingModal,
} from 'ui-components';

import { ModelVulnerabilityScanTriggerReqScanConfigEnum } from '@/api/generated';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}

const packages = [
  {
    name: 'OS Packages',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Base,
  },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Dotnet,
  },
];

const LabelWithClearComponent = ({
  label,
  clearAFilterType,
}: {
  label: string;
  clearAFilterType: () => void;
}) => {
  return (
    <div className="flex gap-x-2 items-center">
      {label}
      <Button
        className="text-xs text-blue-400 dark:text-blue-400"
        onClick={() => clearAFilterType()}
        size="xs"
        color="normal"
      >
        Clear
      </Button>
    </div>
  );
};

const FilterHeader = ({ clearAllFilterType }: { clearAllFilterType: () => void }) => {
  return (
    <ModalHeader>
      <div className="flex gap-x-2 items-center p-4">
        <span className="font-medium text-lg">Filters</span>
        <Button
          className="text-xs text-blue-400 dark:text-blue-400"
          onClick={() => clearAllFilterType()}
          size="xs"
          color="normal"
        >
          Clear All
        </Button>
      </div>
    </ModalHeader>
  );
};

export const UniqueVulnerabilityFilterModal = ({
  showFilter,
  elementToFocusOnClose,
  setShowFilter,
}: {
  elementToFocusOnClose: RefObject<FocusableElement> | null;
  showFilter: boolean;
  setShowFilter: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const clearAFilterType = () => {
    console.log();
  };
  const clearAllFilterType = () => {
    console.log();
  };

  return (
    <SlidingModal
      header={<FilterHeader clearAllFilterType={clearAllFilterType} />}
      open={showFilter}
      onOpenChange={() => setShowFilter(false)}
      elementToFocusOnCloseRef={elementToFocusOnClose}
      width={'w-[350px]'}
    >
      <div className="dark:text-white p-4">
        <Form className="flex flex-col gap-y-6">
          <fieldset>
            <legend className="text-sm font-medium flex items-center">
              Status
              <Button
                className="text-xs text-blue-400 dark:text-blue-400"
                onClick={() => clearAFilterType()}
                size="xs"
                color="normal"
              >
                Clear
              </Button>
            </legend>
            <div className="flex gap-x-4">
              <Checkbox name="completed" label="Completed" />
              <Checkbox name="inProgress" label="In Progress" />
              <Checkbox name="failed" label="Failed" />
            </div>
          </fieldset>
          <fieldset>
            <legend className="text-sm font-medium flex items-center">
              Severity
              <Button
                className="text-xs text-blue-400 dark:text-blue-400"
                onClick={() => clearAFilterType()}
                size="xs"
                color="normal"
              >
                Clear
              </Button>
            </legend>
            <div className="flex gap-x-4">
              <Checkbox name="critical" label="Critical" />
              <Checkbox name="high" label="High" />
              <Checkbox name="medium" label="Medium" />
              <Checkbox name="low" label="Low" />
            </div>
          </fieldset>
          <fieldset>
            <Select
              name="language"
              label={
                <LabelWithClearComponent
                  label={'Language'}
                  clearAFilterType={clearAllFilterType}
                />
              }
              placeholder="Select language"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="container"
              label={
                <LabelWithClearComponent
                  label={'Container'}
                  clearAFilterType={clearAllFilterType}
                />
              }
              placeholder="Select container"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="host"
              label={
                <LabelWithClearComponent
                  label={'Host'}
                  clearAFilterType={clearAllFilterType}
                />
              }
              placeholder="Select host"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="image"
              label={
                <LabelWithClearComponent
                  label={'Image'}
                  clearAFilterType={clearAllFilterType}
                />
              }
              placeholder="Select image"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="cluster"
              label={
                <LabelWithClearComponent
                  label={'Cluster'}
                  clearAFilterType={clearAllFilterType}
                />
              }
              placeholder="Select cluster"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
        </Form>
      </div>
    </SlidingModal>
  );
};

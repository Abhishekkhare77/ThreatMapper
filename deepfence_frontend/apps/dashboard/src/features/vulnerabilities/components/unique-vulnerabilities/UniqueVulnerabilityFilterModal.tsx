import { RefObject } from 'react';
import { Form } from 'react-router-dom';
import { Checkbox, Select, SelectItem, SlidingModal } from 'ui-components';

import { ModelVulnerabilityScanTriggerReqScanConfigEnum } from '@/api/generated';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}

const packages = [
  {
    name: 'OS Packages',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Base,
  },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Dotnet,
  },
];

export const UniqueVulnerabilityFilterModal = ({
  showFilter,
  elementToFocusOnClose,
  setShowFilter,
}: {
  elementToFocusOnClose: RefObject<FocusableElement> | null;
  showFilter: boolean;
  setShowFilter: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  return (
    <SlidingModal
      title="Filters"
      open={showFilter}
      onOpenChange={() => setShowFilter(false)}
      elementToFocusOnCloseRef={elementToFocusOnClose}
      width={'w-[350px]'}
    >
      <div className="dark:text-white p-4">
        <Form className="flex flex-col gap-y-6">
          <fieldset>
            <legend className="text-sm font-medium">Status</legend>
            <div className="flex gap-x-4 pt-1">
              <Checkbox name="completed" label="Completed" />
              <Checkbox name="inProgress" label="In Progress" />
              <Checkbox name="failed" label="Failed" />
            </div>
          </fieldset>
          <fieldset className="text-sm font-medium">
            <legend>Severity</legend>
            <div className="flex gap-x-4 pt-1">
              <Checkbox name="critical" label="Critical" />
              <Checkbox name="high" label="High" />
              <Checkbox name="medium" label="Medium" />
              <Checkbox name="low" label="Low" />
            </div>
          </fieldset>
          <fieldset>
            <Select
              // value={value}
              name="language"
              onChange={(value) => {
                // setValue(value);
              }}
              label="Language"
              placeholder="Select language"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              // value={value}
              name="container"
              onChange={(value) => {
                // setValue(value);
              }}
              label="Container"
              placeholder="Select container"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              // value={value}
              name="host"
              onChange={(value) => {
                // setValue(value);
              }}
              label="Host"
              placeholder="Select host"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              // value={value}
              name="image"
              onChange={(value) => {
                // setValue(value);
              }}
              label="Image"
              placeholder="Select image"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              // value={value}
              name="cluster"
              onChange={(value) => {
                // setValue(value);
              }}
              label="Cluster"
              placeholder="Select cluster"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
        </Form>
      </div>
    </SlidingModal>
  );
};

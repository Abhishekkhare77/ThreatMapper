import cx from 'classnames';
import { useMemo, useRef, useState } from 'react';
import { RefObject } from 'react';
import { IconContext } from 'react-icons';
import { FiFilter } from 'react-icons/fi';
import { HiArrowSmLeft, HiClock, HiDotsVertical } from 'react-icons/hi';
import { Form, useParams } from 'react-router-dom';
import {
  Badge,
  Button,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  getRowSelectionColumn,
  Table,
} from 'ui-components';
import { Checkbox, ModalHeader, Select, SelectItem, SlidingModal } from 'ui-components';

import { ModelVulnerabilityScanTriggerReqScanConfigEnum } from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { IconMapForNodeType } from '@/features/onboard/components/IconMapForNodeType';

type TableDataType = {
  nodeType: string;
  nodeName: string;
  timestamp: string;
  status: string;
  total: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
  action?: null;
};

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}

const packages = [
  {
    name: 'OS Packages',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Base,
  },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Dotnet,
  },
];

const data = Array.from(Array(25).keys()).map((i) => {
  return {
    nodeType: i % 2 === 0 ? 'container_image' : 'host',
    nodeName: 'nginx',
    timestamp: 'Dec 2 2022 6:42:09',
    status: i % 2 === 0 ? 'Completed' : 'Failed',
    total: 1234,
    critical: 99,
    high: 3,
    medium: 29,
    low: 188,
  };
});
const FilterHeader = () => {
  return (
    <ModalHeader>
      <div className="flex gap-x-2 items-center p-4">
        <span className="font-medium text-lg">Filters</span>
      </div>
    </ModalHeader>
  );
};

const FilterModal = ({
  showFilter,
  elementToFocusOnClose,
  setShowFilter,
}: {
  elementToFocusOnClose: RefObject<FocusableElement> | null;
  showFilter: boolean;
  setShowFilter: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  return (
    <SlidingModal
      header={<FilterHeader />}
      open={showFilter}
      onOpenChange={() => setShowFilter(false)}
      elementToFocusOnCloseRef={elementToFocusOnClose}
      width={'w-[350px]'}
    >
      <div className="dark:text-white p-4">
        <Form className="flex flex-col gap-y-6">
          <fieldset>
            <legend className="text-sm font-medium">Status</legend>
            <div className="flex gap-x-4">
              <Checkbox name="completed" label="Completed" />
              <Checkbox name="inProgress" label="In Progress" />
              <Checkbox name="failed" label="Failed" />
            </div>
          </fieldset>
          <fieldset>
            <legend className="text-sm font-medium">Severity</legend>
            <div className="flex gap-x-4">
              <Checkbox name="critical" label="Critical" />
              <Checkbox name="high" label="High" />
              <Checkbox name="medium" label="Medium" />
              <Checkbox name="low" label="Low" />
            </div>
          </fieldset>
          <fieldset>
            <Select
              name="language"
              label={'Language'}
              placeholder="Select language"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="container"
              label={'Container'}
              placeholder="Select container"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select name="host" label={'Host'} placeholder="Select host" sizing="xs">
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select name="image" label={'Image'} placeholder="Select image" sizing="xs">
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="cluster"
              label={'Cluster'}
              placeholder="Select cluster"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
        </Form>
      </div>
    </SlidingModal>
  );
};

const ShowDataFrom = () => {
  return (
    <Dropdown
      content={
        <>
          <DropdownItem>Last 12 hours</DropdownItem>
          <DropdownItem>Last 24 hours</DropdownItem>
          <DropdownItem>Last 7 days</DropdownItem>
          <DropdownItem>Last 30 days</DropdownItem>
          <DropdownItem>Last 60 days</DropdownItem>
          <DropdownItem>Last 90 days</DropdownItem>
          <DropdownItem>Last 6 months</DropdownItem>
          <DropdownItem>Show ALl</DropdownItem>
        </>
      }
    >
      <Button color="default" startIcon={<HiClock />} size="xs">
        Show From
      </Button>
    </Dropdown>
  );
};

const VulnerabilityScanResult = () => {
  const params = useParams() as {
    scanOn: string;
  };
  const scanOn = params.scanOn;

  const elementToFocusOnClose = useRef(null);
  const [showFilter, setShowFilter] = useState(false);

  const columnHelper = createColumnHelper<TableDataType>();
  const columns = useMemo(() => {
    const columns = [
      getRowSelectionColumn(columnHelper, {
        size: 0,
        minSize: 0,
        maxSize: 0,
      }),
      columnHelper.accessor('nodeType', {
        enableSorting: false,
        cell: (info) => {
          return (
            <DFLink to={`/vulnerability/scan-results/${info.getValue()}`}>
              <div className="flex items-center gap-x-2">
                <div className="bg-blue-100 dark:bg-blue-500/10 p-2 rounded-lg">
                  <IconContext.Provider
                    value={{ className: 'w-5 h-5 text-blue-500 dark:text-blue-400' }}
                  >
                    {IconMapForNodeType[info.getValue()]}
                  </IconContext.Provider>
                </div>
                <span className="capitalize">
                  {info.getValue()?.replaceAll('_', ' ')}
                </span>
              </div>
            </DFLink>
          );
        },
        header: () => 'Type',
        minSize: 500,
      }),
      columnHelper.accessor('nodeName', {
        enableSorting: false,
        cell: (info) => info.getValue(),
        header: () => 'Name',
        minSize: 500,
      }),
      columnHelper.accessor('timestamp', {
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <IconContext.Provider value={{ className: 'text-gray-400' }}>
              <HiClock />
            </IconContext.Provider>
            {info.getValue()}
          </div>
        ),
        header: () => 'Timestamp',
        minSize: 500,
      }),
      columnHelper.accessor('status', {
        enableSorting: false,
        cell: (info) => (
          <Badge
            label={info.getValue()}
            className={cx({
              'bg-green-100 dark:bg-green-600/10 text-green-600 dark:text-green-400':
                info.getValue().toLocaleLowerCase() === 'completed',
              'bg-red-100 dark:bg-red-600/10 text-red-600 dark:text-red-400':
                info.getValue().toLocaleLowerCase() === 'failed',
            })}
            size="sm"
          />
        ),
        header: () => 'Status',
        minSize: 500,
      }),
      columnHelper.accessor('total', {
        enableSorting: true,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-5 h-5 text-gray-400">
              <VulnerabilityIcon />
            </div>
            {info.getValue()}
          </div>
        ),
        header: () => 'Total',
        minSize: 200,
      }),
      columnHelper.accessor('critical', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-red-400 dark:bg-red-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 200,
      }),
      columnHelper.accessor('high', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-pink-400 dark:bg-pink-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 200,
      }),
      columnHelper.accessor('medium', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-blue-400 dark:bg-blue-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 200,
      }),
      columnHelper.accessor('low', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-yellow-300 dark:bg-yellow-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 200,
      }),
      columnHelper.accessor('action', {
        enableSorting: false,
        cell: () => (
          <IconContext.Provider value={{ className: 'text-gray-700 dark:text-gray-400' }}>
            <HiDotsVertical />
          </IconContext.Provider>
        ),
        header: () => '',
        minSize: 10,
      }),
    ];

    return columns;
  }, []);

  return (
    <div>
      <FilterModal
        showFilter={showFilter}
        setShowFilter={setShowFilter}
        elementToFocusOnClose={elementToFocusOnClose.current}
      />
      <div className="flex p-1 pl-2 w-full items-center shadow bg-white dark:bg-gray-800">
        <DFLink
          to={'/vulnerability'}
          className="flex hover:no-underline items-center justify-center mr-2"
        >
          <IconContext.Provider
            value={{
              className: 'w-5 h-5 text-blue-600 dark:text-blue-500 ',
            }}
          >
            <HiArrowSmLeft />
          </IconContext.Provider>
        </DFLink>
        <span className="text-sm font-medium text-gray-700 dark:text-gray-200">
          VULNERABILITY SCAN RESULTS - {scanOn.toUpperCase()}
        </span>
        <div className="ml-auto flex gap-x-4">
          <ShowDataFrom />
          <div className="relative gap-x-4">
            <span className="absolute left-0 top-0 inline-flex h-2 w-2 rounded-full bg-blue-400 opacity-75"></span>
            <Button
              className="ml-auto bg-blue-100 dark:bg-blue-500/10"
              size="xs"
              color="normal"
              ref={elementToFocusOnClose}
              onClick={() => {
                setShowFilter(true);
              }}
            >
              <IconContext.Provider
                value={{
                  className: 'w-4 h-4',
                }}
              >
                <FiFilter />
              </IconContext.Provider>
            </Button>
          </div>
        </div>
      </div>
      <div className="m-2">
        <Table
          size="sm"
          data={data}
          columns={columns}
          enableRowSelection
          enableSorting
          getRowCanExpand={() => {
            return true;
          }}
          renderSubComponent={() => {
            return (
              <p className="dark:text-gray-200 py-2 px-4 overflow-auto text-sm">
                Error message will be displayed here
              </p>
            );
          }}
        />
      </div>
    </div>
  );
};

export const module = {
  element: <VulnerabilityScanResult />,
};

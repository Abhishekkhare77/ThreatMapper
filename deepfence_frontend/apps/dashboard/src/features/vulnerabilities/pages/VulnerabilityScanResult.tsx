import cx from 'classnames';
import { Suspense, useMemo, useRef, useState } from 'react';
import { RefObject } from 'react';
import { IconContext } from 'react-icons';
import { FiFilter } from 'react-icons/fi';
import { HiArrowSmLeft, HiClock, HiDotsVertical, HiRefresh } from 'react-icons/hi';
import {
  Await,
  Form,
  LoaderFunctionArgs,
  useLoaderData,
  useParams,
} from 'react-router-dom';
import {
  Badge,
  Button,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  getRowSelectionColumn,
  Table,
  TableSkeleton,
} from 'ui-components';
import { Checkbox, ModalHeader, Select, SelectItem, SlidingModal } from 'ui-components';

import { getVulnerabilityApiClient } from '@/api/api';
import {
  ApiDocsBadRequestResponse,
  ModelVulnerabilityScanTriggerReqScanConfigEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { IconMapForNodeType } from '@/features/onboard/components/IconMapForNodeType';
import { ApiError, makeRequest } from '@/utils/api';
import { formatMilliseconds } from '@/utils/date';
import { typedDefer, TypedDeferredData } from '@/utils/router';
import { usePageNavigation } from '@/utils/usePageNavigation';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}

const packages = [
  {
    name: 'OS Packages',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Base,
  },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanTriggerReqScanConfigEnum.Dotnet,
  },
];

enum ScanType {
  Host = 'host',
  Container = 'container',
  Image = 'container_image',
}

type ScanResult = {
  nodeType: string;
  scanId: string;
  nodeName: string;
  timestamp: number;
  status: string;
  total: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
  action?: null;
};

export type LoaderDataType = {
  error?: string;
  message?: string;
  data?: ScanResult[];
};

async function getScans(scanType: ScanType): Promise<ScanResult[]> {
  const result = await makeRequest({
    apiFunction: getVulnerabilityApiClient().searchVulnerabilityScan,
    apiArgs: [
      {
        searchSearchScanReq: {
          node_filters: {
            filters: {
              contains_filter: {
                filter_in: {
                  node_type: [scanType],
                },
              },
              order_filter: {
                order_field: '',
              },
            },
            in_field_filter: null,
          },
          scan_filters: {
            filters: {
              contains_filter: {
                filter_in: {},
              },
              order_filter: {
                order_field: '',
              },
            },
            in_field_filter: null,
          },
          window: {
            offset: 0,
            size: 1000,
          },
        },
      },
    ],
    errorHandler: async (r) => {
      const error = new ApiError<LoaderDataType>({});
      if (r.status === 400) {
        const modelResponse: ApiDocsBadRequestResponse = await r.json();
        return error.set({
          message: modelResponse.message,
        });
      }
    },
  });

  if (ApiError.isApiError(result)) {
    throw result.value();
  }

  if (result === null) {
    return [];
  }
  return result.map((res) => {
    const severities = res.severity_counts as {
      critical: number;
      high: number;
      medium: number;
      low: number;
    };
    severities.critical = severities.critical ?? 0;
    severities.high = severities.high ?? 0;
    severities.medium = severities.medium ?? 0;
    severities.low = severities.low ?? 0;

    return {
      nodeType: scanType,
      scanId: res.scan_id,
      nodeName: res.node_id,
      timestamp: res.updated_at,
      status: res.status,
      total: severities.critical + severities.high + severities.medium + severities.low,
      critical: severities.critical,
      high: severities.high,
      medium: severities.medium,
      low: severities.low,
    };
  });
}

const loader = async ({
  params,
}: LoaderFunctionArgs): Promise<TypedDeferredData<LoaderDataType>> => {
  const nodeType = params?.nodeType ?? '';

  return typedDefer({
    data: getScans(nodeType as ScanType),
  });
};

const FilterHeader = () => {
  return (
    <ModalHeader>
      <div className="flex gap-x-2 items-center p-4">
        <span className="font-medium text-lg">Filters</span>
      </div>
    </ModalHeader>
  );
};

const FilterModal = ({
  showFilter,
  elementToFocusOnClose,
  setShowFilter,
}: {
  elementToFocusOnClose: RefObject<FocusableElement> | null;
  showFilter: boolean;
  setShowFilter: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const [statusFilter, setStatusFilter] = useState({
    completed: false,
    inProgress: false,
    error: false,
  });

  return (
    <SlidingModal
      header={<FilterHeader />}
      open={showFilter}
      onOpenChange={() => setShowFilter(false)}
      elementToFocusOnCloseRef={elementToFocusOnClose}
      width={'w-[350px]'}
    >
      <div className="dark:text-white p-4">
        <Form className="flex flex-col gap-y-6">
          <fieldset>
            <legend className="text-sm font-medium">Status</legend>
            <div className="flex gap-x-4">
              <Checkbox
                name="completed"
                label="Completed"
                checked={statusFilter.completed}
                onCheckedChange={(state) => {
                  setStatusFilter({
                    ...statusFilter,
                    completed: !!state,
                  });
                }}
              />
              <Checkbox
                name="inProgress"
                label="In Progress"
                checked={statusFilter.inProgress}
                onCheckedChange={(state) => {
                  setStatusFilter({
                    ...statusFilter,
                    inProgress: !!state,
                  });
                }}
              />
              <Checkbox
                name="error"
                label="Failed"
                checked={statusFilter.error}
                onCheckedChange={(state) => {
                  setStatusFilter({
                    ...statusFilter,
                    error: !!state,
                  });
                }}
              />
            </div>
          </fieldset>
          <fieldset>
            <legend className="text-sm font-medium">Severity</legend>
            <div className="flex gap-x-4">
              <Checkbox name="critical" label="Critical" />
              <Checkbox name="high" label="High" />
              <Checkbox name="medium" label="Medium" />
              <Checkbox name="low" label="Low" />
            </div>
          </fieldset>
          <fieldset>
            <Select
              name="language"
              label={'Language'}
              placeholder="Select language"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="container"
              label={'Container'}
              placeholder="Select container"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select name="host" label={'Host'} placeholder="Select host" sizing="xs">
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select name="image" label={'Image'} placeholder="Select image" sizing="xs">
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
          <fieldset>
            <Select
              name="cluster"
              label={'Cluster'}
              placeholder="Select cluster"
              sizing="xs"
            >
              {packages.map((pkg: { name: string }) => {
                return <SelectItem value={pkg.name} key={pkg.name} />;
              })}
            </Select>
          </fieldset>
        </Form>
      </div>
    </SlidingModal>
  );
};

const ScanFromDropdown = () => {
  return (
    <Dropdown
      content={
        <>
          <DropdownItem className="text-xs">Last 12 hours</DropdownItem>
          <DropdownItem className="text-xs">Last 24 hours</DropdownItem>
          <DropdownItem className="text-xs">Last 7 days</DropdownItem>
          <DropdownItem className="text-xs">Last 30 days</DropdownItem>
          <DropdownItem className="text-xs">Last 60 days</DropdownItem>
          <DropdownItem className="text-xs">Last 90 days</DropdownItem>
          <DropdownItem className="text-xs">Last 6 months</DropdownItem>
          <DropdownItem className="text-xs">Show All</DropdownItem>
        </>
      }
    >
      <Button
        className="ml-auto bg-blue-100 dark:bg-blue-500/10"
        size="xs"
        color="normal"
      >
        <IconContext.Provider
          value={{
            className: 'w-4 h-4',
          }}
        >
          <HiClock />
        </IconContext.Provider>
      </Button>
    </Dropdown>
  );
};

const RefreshApiDropdown = () => {
  return (
    <Dropdown
      content={
        <>
          <DropdownItem className="text-xs">1 minute</DropdownItem>
          <DropdownItem className="text-xs">5 minutes</DropdownItem>
          <DropdownItem className="text-xs">15 minutes</DropdownItem>
          <DropdownItem className="text-xs">1 hour</DropdownItem>
          <DropdownItem className="text-xs">2 hours</DropdownItem>
          <DropdownItem className="text-xs">12 hours</DropdownItem>
          <DropdownItem className="text-xs">1 day</DropdownItem>
        </>
      }
    >
      <Button
        className="ml-auto bg-blue-100 dark:bg-blue-500/10"
        size="xs"
        color="normal"
      >
        <IconContext.Provider
          value={{
            className: 'w-4 h-4',
          }}
        >
          <HiRefresh />
        </IconContext.Provider>
      </Button>
    </Dropdown>
  );
};

const VulnerabilityScanResult = () => {
  const params = useParams() as {
    nodeType: string;
  };
  const nodeType = params.nodeType;

  const elementToFocusOnClose = useRef(null);
  const [showFilter, setShowFilter] = useState(false);
  const loaderData = useLoaderData() as LoaderDataType;
  const totalRows = 10;

  const [{ pageIndex, pageSize }, setPagination] = useState({
    pageIndex: 0,
    pageSize: 15,
  });

  const { navigate } = usePageNavigation();

  const columnHelper = createColumnHelper<ScanResult>();
  const columns = useMemo(() => {
    const columns = [
      getRowSelectionColumn(columnHelper, {
        size: 0,
        minSize: 0,
        maxSize: 0,
      }),
      columnHelper.accessor('nodeType', {
        enableSorting: false,
        cell: (info) => {
          return (
            <div className="flex items-center gap-x-2">
              <div className="bg-blue-100 dark:bg-blue-500/10 p-2 rounded-lg">
                <IconContext.Provider
                  value={{ className: 'w-5 h-5 text-blue-500 dark:text-blue-400' }}
                >
                  {IconMapForNodeType[info.getValue()]}
                </IconContext.Provider>
              </div>
              <span className="capitalize">{info.getValue()?.replaceAll('_', ' ')}</span>
            </div>
          );
        },
        header: () => 'Type',
        minSize: 200,
        size: 250,
        maxSize: 250,
      }),
      columnHelper.accessor('nodeName', {
        enableSorting: false,
        cell: (info) => (
          <DFLink
            to="#"
            onClick={(e) => {
              e.preventDefault();
              navigate(
                `/vulnerability/scan-results/${nodeType}/${info.row.original.scanId}`,
                {
                  state: {
                    updatedAt: info.row.original.timestamp,
                    severityCounts: {
                      critical: info.row.original.critical,
                      medium: info.row.original.medium,
                      high: info.row.original.high,
                      low: info.row.original.low,
                      total: info.row.original.total,
                    },
                  },
                },
              );
            }}
          >
            <div className="flex items-center gap-x-2">
              <div className="bg-blue-100 dark:bg-blue-500/10 p-2 rounded-lg">
                <IconContext.Provider
                  value={{ className: 'w-5 h-5 text-blue-500 dark:text-blue-400' }}
                >
                  {IconMapForNodeType[info.getValue()]}
                </IconContext.Provider>
              </div>
              <span className="capitalize">{info.getValue()?.replaceAll('_', ' ')}</span>
            </div>
          </DFLink>
        ),
        header: () => 'Name',
        minSize: 300,
        size: 350,
        maxSize: 350,
      }),
      columnHelper.accessor('timestamp', {
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <IconContext.Provider value={{ className: 'text-gray-400' }}>
              <HiClock />
            </IconContext.Provider>
            {formatMilliseconds(info.getValue())}
          </div>
        ),
        header: () => 'Timestamp',
        minSize: 300,
        size: 300,
        maxSize: 300,
      }),
      columnHelper.accessor('status', {
        enableSorting: false,
        cell: (info) => (
          <Badge
            label={info.getValue().toLowerCase()}
            className={cx({
              'bg-green-100 dark:bg-green-600/10 text-green-600 dark:text-green-400':
                info.getValue().toLowerCase() === 'complete',
              'bg-red-100 dark:bg-red-600/10 text-red-600 dark:text-red-400':
                info.getValue().toLowerCase() === 'error',
              'bg-blue-100 dark:bg-blue-600/10 text-blue-600 dark:text-blue-400':
                info.getValue().toLowerCase() === 'in_progress',
            })}
            size="sm"
          />
        ),
        header: () => 'Status',
        minSize: 100,
        size: 100,
        maxSize: 100,
      }),
      columnHelper.accessor('total', {
        enableSorting: true,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-5 h-5 text-gray-400">
              <VulnerabilityIcon />
            </div>
            {info.getValue()}
          </div>
        ),
        header: () => 'Total',
        minSize: 100,
        size: 150,
        maxSize: 150,
      }),
      columnHelper.accessor('critical', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-red-400 dark:bg-red-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 100,
        size: 150,
        maxSize: 150,
      }),
      columnHelper.accessor('high', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-pink-400 dark:bg-pink-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 100,
        size: 150,
        maxSize: 150,
      }),
      columnHelper.accessor('medium', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-blue-400 dark:bg-blue-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 100,
        size: 150,
        maxSize: 150,
      }),
      columnHelper.accessor('low', {
        enableSorting: false,
        cell: (info) => (
          <div className="flex items-center gap-x-2">
            <div className="w-2 h-2 bg-yellow-300 dark:bg-yellow-500 rounded-full"></div>
            {info.getValue()}
          </div>
        ),
        header: () => '',
        minSize: 100,
        size: 150,
        maxSize: 150,
      }),
      columnHelper.accessor('action', {
        enableSorting: false,
        cell: () => (
          <IconContext.Provider value={{ className: 'text-gray-700 dark:text-gray-400' }}>
            <HiDotsVertical />
          </IconContext.Provider>
        ),
        header: () => '',
        minSize: 10,
      }),
    ];

    return columns;
  }, []);

  return (
    <div>
      <FilterModal
        showFilter={showFilter}
        setShowFilter={setShowFilter}
        elementToFocusOnClose={elementToFocusOnClose.current}
      />
      <div className="flex p-1 pl-2 w-full items-center shadow bg-white dark:bg-gray-800">
        <DFLink
          to={'/vulnerability'}
          className="flex hover:no-underline items-center justify-center mr-2"
        >
          <IconContext.Provider
            value={{
              className: 'w-5 h-5 text-blue-600 dark:text-blue-500 ',
            }}
          >
            <HiArrowSmLeft />
          </IconContext.Provider>
        </DFLink>
        <span className="text-sm font-medium text-gray-700 dark:text-gray-200">
          VULNERABILITY SCAN RESULTS - {nodeType.toUpperCase().replace('_', ' ')}
        </span>
        <div className="ml-auto flex gap-x-4">
          <ScanFromDropdown />
          <RefreshApiDropdown />
          <div className="relative gap-x-4">
            <span className="absolute left-0 top-0 inline-flex h-2 w-2 rounded-full bg-blue-400 opacity-75"></span>
            <Button
              className="ml-auto bg-blue-100 dark:bg-blue-500/10"
              size="xs"
              color="normal"
              ref={elementToFocusOnClose}
              onClick={() => {
                setShowFilter(true);
              }}
            >
              <IconContext.Provider
                value={{
                  className: 'w-4 h-4',
                }}
              >
                <FiFilter />
              </IconContext.Provider>
            </Button>
          </div>
        </div>
      </div>
      <div className="m-2">
        <Suspense
          fallback={
            <div className="mt-16">
              <TableSkeleton columns={10} rows={10} size={'md'} />
            </div>
          }
        >
          <Await resolve={loaderData.data ?? []}>
            {(resolvedData: ScanResult[]) => {
              return (
                <Table
                  size="sm"
                  data={resolvedData}
                  columns={columns}
                  enableRowSelection
                  enableSorting
                  enablePagination
                  manualPagination
                  totalRows={totalRows}
                  pageSize={pageSize}
                  pageIndex={pageIndex}
                  onPaginationChange={setPagination}
                />
              );
            }}
          </Await>
        </Suspense>
      </div>
    </div>
  );
};

export const module = {
  loader,
  element: <VulnerabilityScanResult />,
};

import { useSuspenseQuery } from '@suspensive/react-query';
import { useIsFetching } from '@tanstack/react-query';
import { capitalize } from 'lodash-es';
import React, { Suspense, useCallback, useEffect, useMemo, useState } from 'react';
import { IconContext } from 'react-icons';
import {
  ActionFunctionArgs,
  generatePath,
  useFetcher,
  useSearchParams,
} from 'react-router-dom';
import { toast } from 'sonner';
import {
  Badge,
  Breadcrumb,
  BreadcrumbLink,
  Button,
  CircleSpinner,
  Combobox,
  ComboboxOption,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  Modal,
  SortingState,
  Table,
  TableSkeleton,
} from 'ui-components';

import { getScanResultsApiClient, getVulnerabilityApiClient } from '@/api/api';
import {
  ModelVulnerabilityScanConfigLanguageLanguageEnum,
  UtilsReportFiltersNodeTypeEnum,
  UtilsReportFiltersScanTypeEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { FilterBadge } from '@/components/filters/FilterBadge';
import { SearchableClusterList } from '@/components/forms/SearchableClusterList';
import { SearchableContainerList } from '@/components/forms/SearchableContainerList';
import { SearchableHostList } from '@/components/forms/SearchableHostList';
import { SearchableImageList } from '@/components/forms/SearchableImageList';
import { EllipsisIcon } from '@/components/icons/common/Ellipsis';
import { FilterIcon } from '@/components/icons/common/Filter';
import { TimesIcon } from '@/components/icons/common/Times';
import { WarnIcon } from '@/components/icons/common/Warn';
import { ScanStatusBadge } from '@/components/ScanStatusBadge';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { SEVERITY_COLORS } from '@/constants/charts';
import { useDownloadScan } from '@/features/common/data-component/downloadScanAction';
import { IconMapForNodeType } from '@/features/onboard/components/IconMapForNodeType';
import { SuccessModalContent } from '@/features/settings/components/SuccessModalContent';
import { SbomModal } from '@/features/vulnerabilities/api/sbomApiLoader';
import { invalidateAllQueries, queries } from '@/queries';
import { ScanTypeEnum } from '@/types/common';
import { apiWrapper } from '@/utils/api';
import { formatMilliseconds } from '@/utils/date';
import { download } from '@/utils/download';
import { isScanComplete } from '@/utils/scan';
import { getOrderFromSearchParams, useSortingState } from '@/utils/table';
import { usePageNavigation } from '@/utils/usePageNavigation';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}

enum ActionEnumType {
  DELETE = 'delete',
  DOWNLOAD_SBOM = 'downloadSBOM',
}

const PAGE_SIZE = 15;

const packages = [
  // {
  //   name: 'OS Packages',
  //   checked: false,
  //   value: ModelVulnerabilityScanConfigLanguageLanguageEnum.OsPackages,
  // },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Dotnet,
  },
];

const action = async ({
  request,
}: ActionFunctionArgs): Promise<
  | {
      url: string;
    }
  | null
  | { success?: boolean; message?: string }
> => {
  const formData = await request.formData();
  const actionType = formData.get('actionType');
  const scanId = formData.get('scanId');
  const nodeId = formData.get('nodeId');
  if (!actionType || !scanId || !nodeId) {
    throw new Error('Invalid action');
  }

  if (actionType === ActionEnumType.DELETE) {
    const resultApi = apiWrapper({
      fn: getScanResultsApiClient().deleteScanResultsForScanID,
    });
    const result = await resultApi({
      scanId: scanId.toString(),
      scanType: ScanTypeEnum.VulnerabilityScan,
    });
    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        return {
          success: false,
          message: result.error.message ?? '',
        };
      } else if (result.error.response.status === 403) {
        return {
          success: false,
          message: 'You do not have enough permissions to delete scan',
        };
      }
    }
    invalidateAllQueries();
    return {
      success: true,
    };
  } else if (actionType === ActionEnumType.DOWNLOAD_SBOM) {
    const resultApi = apiWrapper({
      fn: getVulnerabilityApiClient().downloadSBOM,
    });
    const result = await resultApi({
      modelSbomRequest: { scan_id: scanId.toString() },
    });
    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        toast.error(result.error.message || 'Something went wrong');
        return {
          success: false,
          message: result.error.message ?? '',
        };
      }
    } else {
      const url = result.value.url_link;
      if (url) {
        download(url);
      } else {
        toast.error('Something went wrong');
      }
    }
    invalidateAllQueries();

    return null;
  }
  return null;
};

const DeleteConfirmationModal = ({
  showDialog,
  scanId,
  nodeId,
  setShowDialog,
}: {
  showDialog: boolean;
  scanId: string;
  nodeId: string;
  setShowDialog: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const fetcher = useFetcher();

  const onDeleteAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      formData.append('scanId', scanId);
      formData.append('nodeId', nodeId);
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [scanId, nodeId, fetcher],
  );

  return (
    <Modal
      open={showDialog}
      onOpenChange={() => setShowDialog(false)}
      size="s"
      title={
        <div className="flex gap-3 items-center dark:text-status-error">
          <span className="w-6 h-6">
            {' '}
            <WarnIcon />
          </span>
          Delete Scan
        </div>
      }
      footer={
        <div className={'flex gap-x-3 justify-end'}>
          <Button
            size="sm"
            onClick={() => setShowDialog(false)}
            type="button"
            variant="outline"
          >
            Cancel
          </Button>
          <Button
            size="sm"
            color="error"
            onClick={(e) => {
              e.preventDefault();
              onDeleteAction(ActionEnumType.DELETE);
            }}
          >
            DELETE
          </Button>
        </div>
      }
    >
      {!fetcher.data?.success ? (
        <div className="grid">
          Selected scan will be deleted.
          <br />
          <span>Are you sure you want to delete?</span>
          {fetcher.data?.message && <p className="">{fetcher.data?.message}</p>}
          <div className="flex items-center justify-right gap-4"></div>
        </div>
      ) : (
        <SuccessModalContent text="Scan deleted successfully!" />
      )}
    </Modal>
  );
};

const ActionDropdown = ({
  trigger,
  scanId,
  nodeId,
  scanStatus,
  nodeType,
  setShowDeleteDialog,
  setScanIdToDelete,
  setNodeIdToDelete,
  setSelectedNode,
}: {
  trigger: React.ReactNode;
  scanId: string;
  nodeId: string;
  nodeType: string;
  scanStatus: string;
  setShowDeleteDialog: React.Dispatch<React.SetStateAction<boolean>>;
  setScanIdToDelete: React.Dispatch<React.SetStateAction<string>>;
  setNodeIdToDelete: React.Dispatch<React.SetStateAction<string>>;
  setSelectedNode: React.Dispatch<
    React.SetStateAction<{
      nodeName: string;
      scanId: string;
    } | null>
  >;
}) => {
  const fetcher = useFetcher();
  const [open, setOpen] = useState(false);
  const { downloadScan } = useDownloadScan();
  const onDownloadAction = useCallback(
    (actionType?: ActionEnumType) => {
      if (!actionType) {
        downloadScan({
          nodeType: nodeType as UtilsReportFiltersNodeTypeEnum,
          scanId,
          scanType: UtilsReportFiltersScanTypeEnum.Vulnerability,
        });
        return;
      }
      const formData = new FormData();
      formData.append('actionType', actionType);
      formData.append('scanId', scanId);
      formData.append('nodeId', nodeId);
      formData.append('nodeType', nodeType);
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [scanId, nodeId, fetcher],
  );

  useEffect(() => {
    if (fetcher.state === 'idle') setOpen(false);
  }, [fetcher]);

  return (
    <Dropdown
      triggerAsChild
      align="start"
      open={open}
      onOpenChange={setOpen}
      content={
        <>
          <DropdownItem
            onClick={(e) => {
              if (!isScanComplete(scanStatus)) return;
              e.preventDefault();
              onDownloadAction();
            }}
          >
            Download Report
          </DropdownItem>
          <DropdownItem
            onClick={(e) => {
              if (!isScanComplete(scanStatus)) return;
              e.preventDefault();
              onDownloadAction(ActionEnumType.DOWNLOAD_SBOM);
            }}
          >
            Download SBOM
          </DropdownItem>
          <DropdownItem
            onClick={(e) => {
              e.preventDefault();
              if (!isScanComplete(scanStatus)) return;
              setSelectedNode({
                scanId,
                nodeName: nodeId,
              });
            }}
          >
            View SBOM
          </DropdownItem>
          <DropdownItem
            onClick={() => {
              setScanIdToDelete(scanId);
              setNodeIdToDelete(nodeId);
              setShowDeleteDialog(true);
            }}
            disabled
          >
            <span className="flex items-center">Start scan</span>
          </DropdownItem>
          <DropdownItem
            onClick={() => {
              setScanIdToDelete(scanId);
              setNodeIdToDelete(nodeId);
              setShowDeleteDialog(true);
            }}
          >
            <span className="flex items-center text-red-700 dark:text-status-error">
              Delete
            </span>
          </DropdownItem>
        </>
      }
    >
      {trigger}
    </Dropdown>
  );
};

const ScansTable = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const { data } = useSuspenseQuery({
    ...queries.vulnerability.scanList({
      pageSize: PAGE_SIZE,
      clusters: searchParams.getAll('clusters'),
      containers: searchParams.getAll('containers'),
      hosts: searchParams.getAll('hosts'),
      images: searchParams.getAll('containerImages'),
      languages: searchParams.getAll('languages'),
      nodeTypes: searchParams.getAll('nodeType').length
        ? searchParams.getAll('nodeType')
        : ['container_image', 'container', 'host'],
      page: parseInt(searchParams.get('page') ?? '0', 10),
      order: getOrderFromSearchParams(searchParams),
      status: searchParams.getAll('statuses').map((status) => status.toUpperCase()),
    }),
    keepPreviousData: true,
  });
  const [sort, setSort] = useSortingState();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [scanIdToDelete, setScanIdToDelete] = useState('');
  const [nodeIdToDelete, setNodeIdToDelete] = useState('');

  const [selectedNode, setSelectedNode] = useState<{
    nodeName: string;
    scanId: string;
  } | null>(null);

  const { navigate } = usePageNavigation();

  const columnHelper = createColumnHelper<NonNullable<typeof data>['scans'][number]>();

  const columns = useMemo(() => {
    const columns = [
      columnHelper.display({
        id: 'actions',
        enableSorting: false,
        cell: (cell) => (
          <ActionDropdown
            scanId={cell.row.original.scan_id}
            nodeId={cell.row.original.node_id}
            nodeType={cell.row.original.node_type}
            scanStatus={cell.row.original.status}
            setScanIdToDelete={setScanIdToDelete}
            setNodeIdToDelete={setNodeIdToDelete}
            setShowDeleteDialog={setShowDeleteDialog}
            setSelectedNode={setSelectedNode}
            trigger={
              <button className="p-1">
                <span className="block h-4 w-4 dark:text-text-text-and-icon rotate-90">
                  <EllipsisIcon />
                </span>
              </button>
            }
          />
        ),
        header: () => '',
        size: 30,
        minSize: 30,
        maxSize: 50,
        enableResizing: false,
      }),
      columnHelper.accessor('node_type', {
        enableSorting: false,
        cell: (info) => {
          return (
            <div className="flex items-center gap-x-2">
              <div className="p-1.5 rounded-lg">
                <IconContext.Provider value={{ className: 'w-4 h-4' }}>
                  {IconMapForNodeType[info.getValue()]}
                </IconContext.Provider>
              </div>
              <span className="flex-1 truncate capitalize">
                {info.getValue()?.replaceAll('_', ' ')}
              </span>
            </div>
          );
        },
        header: () => 'Type',
        minSize: 110,
        size: 120,
        maxSize: 130,
      }),
      columnHelper.accessor('node_name', {
        cell: (info) => {
          const isNeverScan = info.row.original.status?.toLowerCase() === '';
          const WrapperComponent = ({ children }: { children: React.ReactNode }) => {
            return isNeverScan ? (
              <>{children}</>
            ) : (
              <DFLink
                to={generatePath(`/vulnerability/scan-results/:scanId`, {
                  scanId: info.row.original.scan_id,
                })}
              >
                {children}
              </DFLink>
            );
          };
          return (
            <WrapperComponent>
              <div className="flex items-center gap-x-2 truncate">
                <span className="truncate">{info.getValue()}</span>
              </div>
            </WrapperComponent>
          );
        },
        header: () => 'Name',
        minSize: 230,
        size: 240,
        maxSize: 250,
      }),
      columnHelper.accessor('updated_at', {
        cell: (info) => (
          <div className="flex items-center">
            <span className="truncate">{formatMilliseconds(info.getValue())}</span>
          </div>
        ),
        header: () => 'Timestamp',
        minSize: 140,
        size: 140,
        maxSize: 150,
      }),
      columnHelper.accessor('status', {
        cell: (info) => {
          return <ScanStatusBadge status={info.getValue()} />;
        },
        header: () => 'Scan Status',
        minSize: 100,
        size: 110,
        maxSize: 110,
        enableResizing: false,
      }),
      columnHelper.accessor('total', {
        cell: (info) => (
          <div className="flex items-center justify-end tabular-nums">
            <span className="truncate">{info.getValue()}</span>
          </div>
        ),
        header: () => <div className="text-right truncate">Total</div>,
        minSize: 80,
        size: 80,
        maxSize: 80,
      }),
      columnHelper.accessor('critical', {
        cell: (info) => {
          return (
            <div className="flex items-center justify-end gap-x-2 tabular-nums">
              <div
                className="w-3 h-3 rounded-full"
                style={{
                  backgroundColor: SEVERITY_COLORS['critical'],
                }}
              ></div>
              <DFLink
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  searchParams.set('severity', 'critical');
                  const path = generatePath(
                    `/vulnerability/scan-results/:scanId/?${searchParams.toString()}`,
                    {
                      scanId: info.row.original.scan_id,
                    },
                  );
                  navigate(path);
                }}
              >
                {info.getValue()}
              </DFLink>
            </div>
          );
        },
        header: () => 'Critical',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('high', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['high'],
              }}
            ></div>
            <DFLink
              href="#"
              onClick={(e) => {
                e.preventDefault();
                searchParams.set('severity', 'high');
                const path = generatePath(
                  `/vulnerability/scan-results/:scanId/?${searchParams.toString()}`,
                  {
                    scanId: info.row.original.scan_id,
                  },
                );
                navigate(path);
              }}
            >
              {info.getValue()}
            </DFLink>
          </div>
        ),
        header: () => 'High',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('medium', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['medium'],
              }}
            ></div>
            <DFLink
              href="#"
              onClick={(e) => {
                e.preventDefault();
                searchParams.set('severity', 'medium');
                const path = generatePath(
                  `/vulnerability/scan-results/:scanId/?${searchParams.toString()}`,
                  {
                    scanId: info.row.original.scan_id,
                  },
                );
                navigate(path);
              }}
            >
              {info.getValue()}
            </DFLink>
          </div>
        ),
        header: () => 'Medium',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('low', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['low'],
              }}
            ></div>
            <DFLink
              href="#"
              onClick={(e) => {
                e.preventDefault();
                searchParams.set('severity', 'low');
                const path = generatePath(
                  `/vulnerability/scan-results/:scanId/?${searchParams.toString()}`,
                  {
                    scanId: info.row.original.scan_id,
                  },
                );
                navigate(path);
              }}
            >
              {info.getValue()}
            </DFLink>
          </div>
        ),
        header: () => 'Low',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('unknown', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['unknown'],
              }}
            ></div>
            <DFLink
              href="#"
              onClick={(e) => {
                e.preventDefault();
                searchParams.set('severity', 'unknown');
                const path = generatePath(
                  `/vulnerability/scan-results/:scanId/?${searchParams.toString()}`,
                  {
                    scanId: info.row.original.scan_id,
                  },
                );
                navigate(path);
              }}
            >
              {info.getValue()}
            </DFLink>
          </div>
        ),
        header: () => 'Unknown',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
    ];

    return columns;
  }, []);

  return (
    <>
      {showDeleteDialog && (
        <DeleteConfirmationModal
          showDialog={showDeleteDialog}
          scanId={scanIdToDelete}
          nodeId={nodeIdToDelete}
          setShowDialog={setShowDeleteDialog}
        />
      )}
      {selectedNode ? (
        <SbomModal
          scanId={selectedNode.scanId}
          nodeName={selectedNode.nodeName}
          onClose={() => {
            setSelectedNode(null);
          }}
        />
      ) : null}

      <Table
        data={data.scans}
        columns={columns}
        enablePagination
        manualPagination
        enableColumnResizing
        approximatePagination
        totalRows={data.totalRows}
        pageSize={PAGE_SIZE}
        pageIndex={data.currentPage}
        onPaginationChange={(updaterOrValue) => {
          let newPageIndex = 0;
          if (typeof updaterOrValue === 'function') {
            newPageIndex = updaterOrValue({
              pageIndex: data.currentPage,
              pageSize: PAGE_SIZE,
            }).pageIndex;
          } else {
            newPageIndex = updaterOrValue.pageIndex;
          }
          setSearchParams((prev) => {
            prev.set('page', String(newPageIndex));
            return prev;
          });
        }}
        enableSorting
        manualSorting
        sortingState={sort}
        onSortingChange={(updaterOrValue) => {
          let newSortState: SortingState = [];
          if (typeof updaterOrValue === 'function') {
            newSortState = updaterOrValue(sort);
          } else {
            newSortState = updaterOrValue;
          }
          setSearchParams((prev) => {
            if (!newSortState.length) {
              prev.delete('sortby');
              prev.delete('desc');
            } else {
              prev.set('sortby', String(newSortState[0].id));
              prev.set('desc', String(newSortState[0].desc));
            }
            return prev;
          });
          setSort(newSortState);
        }}
      />
    </>
  );
};

const FILTER_SEARCHPARAMS: Record<string, string> = {
  nodeType: 'Node Types',
  languages: 'Languages',
  statuses: 'Statuses',
  containerImages: 'Container images',
  containers: 'containers',
  hosts: 'hosts',
  clusters: 'clusters',
};

const getAppliedFiltersCount = (searchParams: URLSearchParams) => {
  return Object.keys(FILTER_SEARCHPARAMS).reduce((prev, curr) => {
    return prev + searchParams.getAll(curr).length;
  }, 0);
};
const Filters = () => {
  const [searchParams, setSearchParams] = useSearchParams();

  const [nodeType, setNodeType] = useState('');
  const [languages, setLanguages] = useState('');
  const [containerImages, setContainerImages] = useState<string[]>([]);
  const [containers, setContainers] = useState<string[]>([]);
  const [hosts, setHosts] = useState<string[]>([]);
  const [clusters, setClusters] = useState<string[]>([]);
  const [statuses, setStatuses] = useState('');

  const appliedFilterCount = getAppliedFiltersCount(searchParams);
  return (
    <div className="px-4 py-2.5 mb-4 border dark:border-bg-hover-3 rounded-[5px] overflow-hidden dark:bg-bg-left-nav">
      <div className="flex gap-2">
        <Combobox
          getDisplayValue={() => FILTER_SEARCHPARAMS['nodeType']}
          multiple
          value={searchParams.getAll('nodeType')}
          onChange={(values) => {
            setSearchParams((prev) => {
              prev.delete('nodeType');
              values.forEach((value) => {
                prev.append('nodeType', value);
              });
              prev.delete('page');
              return prev;
            });
          }}
          onQueryChange={(query) => {
            setNodeType(query);
          }}
          clearAllElement="Clear"
          onClearAll={() => {
            setSearchParams((prev) => {
              prev.delete('nodeType');
              prev.delete('page');
              return prev;
            });
          }}
        >
          {['host', 'container', 'container_image']
            .filter((item) => {
              if (!nodeType.length) return true;
              return item.includes(nodeType.toLowerCase());
            })
            .map((item) => {
              return (
                <ComboboxOption key={item} value={item}>
                  {capitalize(item)}
                </ComboboxOption>
              );
            })}
        </Combobox>
        <Combobox
          getDisplayValue={() => FILTER_SEARCHPARAMS['statuses']}
          multiple
          value={searchParams.getAll('statuses')}
          onChange={(values) => {
            setSearchParams((prev) => {
              prev.delete('statuses');
              values.forEach((value) => {
                prev.append('statuses', value);
              });
              prev.delete('page');
              return prev;
            });
          }}
          onQueryChange={(query) => {
            setStatuses(query);
          }}
          clearAllElement="Clear"
          onClearAll={() => {
            setSearchParams((prev) => {
              prev.delete('statuses');
              prev.delete('page');
              return prev;
            });
          }}
        >
          {['complete', 'in progress', 'error']
            .filter((item) => {
              if (!statuses.length) return true;
              return item.includes(statuses.toLowerCase());
            })
            .map((item) => {
              return (
                <ComboboxOption key={item} value={item}>
                  {capitalize(item)}
                </ComboboxOption>
              );
            })}
        </Combobox>
        <Combobox
          getDisplayValue={() => FILTER_SEARCHPARAMS['languages']}
          multiple
          value={searchParams.getAll('languages')}
          onChange={(values) => {
            setSearchParams((prev) => {
              prev.delete('languages');
              values.forEach((value) => {
                prev.append('languages', value);
              });
              prev.delete('page');
              return prev;
            });
          }}
          onQueryChange={(query) => {
            setLanguages(query);
          }}
          clearAllElement="Clear"
          onClearAll={() => {
            setSearchParams((prev) => {
              prev.delete('languages');
              prev.delete('page');
              return prev;
            });
          }}
        >
          {packages
            .filter((item) => {
              if (!languages.length) return true;
              return item.value.includes(languages.toLowerCase());
            })
            .map((pkg: { name: string }) => {
              return (
                <ComboboxOption key={pkg.name} value={pkg.name}>
                  {capitalize(pkg.name)}
                </ComboboxOption>
              );
            })}
        </Combobox>
        <SearchableImageList
          scanType={ScanTypeEnum.VulnerabilityScan}
          defaultSelectedImages={searchParams.getAll('containerImages')}
          onClearAll={() => {
            setContainerImages([]);
            setSearchParams((prev) => {
              prev.delete('containerImages');
              prev.delete('page');
              return prev;
            });
          }}
          onChange={(value) => {
            setContainerImages(value);
            setSearchParams((prev) => {
              prev.delete('containerImages');
              value.forEach((containerImage) => {
                prev.append('containerImages', containerImage);
              });
              prev.delete('page');
              return prev;
            });
          }}
        />
        <SearchableContainerList
          scanType={ScanTypeEnum.VulnerabilityScan}
          defaultSelectedContainers={searchParams.getAll('containers')}
          onClearAll={() => {
            setContainers([]);
            setSearchParams((prev) => {
              prev.delete('containers');
              prev.delete('page');
              return prev;
            });
          }}
          onChange={(value) => {
            setContainers(value);
            setSearchParams((prev) => {
              prev.delete('containers');
              value.forEach((container) => {
                prev.append('containers', container);
              });
              prev.delete('page');
              return prev;
            });
          }}
        />
        <SearchableHostList
          scanType={ScanTypeEnum.VulnerabilityScan}
          defaultSelectedHosts={searchParams.getAll('hosts')}
          onClearAll={() => {
            setHosts([]);
            setSearchParams((prev) => {
              prev.delete('hosts');
              prev.delete('page');
              return prev;
            });
          }}
          onChange={(value) => {
            setHosts(value);
            setSearchParams((prev) => {
              prev.delete('hosts');
              value.forEach((host) => {
                prev.append('hosts', host);
              });
              prev.delete('page');
              return prev;
            });
          }}
        />
        <SearchableClusterList
          defaultSelectedClusters={searchParams.getAll('clusters')}
          onClearAll={() => {
            setClusters([]);
            setSearchParams((prev) => {
              prev.delete('clusters');
              prev.delete('page');
              return prev;
            });
          }}
          onChange={(value) => {
            setClusters(value);
            setSearchParams((prev) => {
              prev.delete('clusters');
              value.forEach((cluster) => {
                prev.append('clusters', cluster);
              });
              prev.delete('page');
              return prev;
            });
          }}
        />
      </div>
      {appliedFilterCount > 0 ? (
        <div className="flex gap-2.5 mt-4 flex-wrap items-center">
          {Array.from(searchParams)
            .filter(([key]) => {
              return Object.keys(FILTER_SEARCHPARAMS).includes(key);
            })
            .map(([key, value]) => {
              return (
                <FilterBadge
                  key={`${key}-${value}`}
                  onRemove={() => {
                    setSearchParams((prev) => {
                      const existingValues = prev.getAll(key);
                      prev.delete(key);
                      existingValues.forEach((existingValue) => {
                        if (existingValue !== value) prev.append(key, existingValue);
                      });
                      prev.delete('page');
                      return prev;
                    });
                  }}
                  text={`${FILTER_SEARCHPARAMS[key]}: ${value}`}
                />
              );
            })}
          <Button
            variant="flat"
            color="default"
            startIcon={<TimesIcon />}
            onClick={() => {
              setSearchParams((prev) => {
                Object.keys(FILTER_SEARCHPARAMS).forEach((key) => {
                  prev.delete(key);
                });
                prev.delete('page');
                return prev;
              });
            }}
            size="sm"
          >
            Clear all
          </Button>
        </div>
      ) : null}
    </div>
  );
};

const VulnerabilityScans = () => {
  const isFetching = useIsFetching({
    queryKey: queries.vulnerability.scanList._def,
  });
  const [filtersExpanded, setFiltersExpanded] = useState(false);
  const [searchParams] = useSearchParams();

  return (
    <div>
      <div className="flex pl-6 pr-4 py-2 w-full items-center bg-white dark:bg-bg-breadcrumb-bar">
        <Breadcrumb>
          <BreadcrumbLink asChild icon={<VulnerabilityIcon />} isLink>
            <DFLink to={'/vulnerability'} unstyled>
              Vulnerabilities
            </DFLink>
          </BreadcrumbLink>
          <BreadcrumbLink>
            <span className="inherit cursor-auto">Vulnerability Scan</span>
          </BreadcrumbLink>
        </Breadcrumb>
        <div className="ml-2 flex items-center">
          {isFetching ? <CircleSpinner size="sm" /> : null}
        </div>
      </div>

      <div className="mx-4">
        <Button
          variant="flat"
          className="ml-auto py-2"
          startIcon={<FilterIcon />}
          endIcon={
            getAppliedFiltersCount(searchParams) > 0 ? (
              <Badge
                label={String(getAppliedFiltersCount(searchParams))}
                variant="filled"
                size="small"
                color="blue"
              />
            ) : null
          }
          size="sm"
          onClick={() => {
            setFiltersExpanded((prev) => !prev);
          }}
        >
          Filter
        </Button>
        {filtersExpanded ? <Filters /> : null}
        <Suspense fallback={<TableSkeleton columns={11} rows={15} />}>
          <ScansTable />
        </Suspense>
      </div>
    </div>
  );
};

export const module = {
  action,
  element: <VulnerabilityScans />,
};

import { useSuspenseQuery } from '@suspensive/react-query';
import { useIsFetching } from '@tanstack/react-query';
import cx from 'classnames';
import React, {
  Suspense,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { IconContext } from 'react-icons';
import { FiFilter } from 'react-icons/fi';
import {
  HiArchive,
  HiDotsVertical,
  HiDownload,
  HiOutlineExclamationCircle,
  HiViewGrid,
} from 'react-icons/hi';
import {
  ActionFunctionArgs,
  Form,
  generatePath,
  useFetcher,
  useSearchParams,
} from 'react-router-dom';
import { toast } from 'sonner';
import {
  Breadcrumb,
  BreadcrumbLink,
  Button,
  Checkbox,
  CircleSpinner,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  IconButton,
  Modal,
  Popover,
  Select,
  SelectItem,
  SortingState,
  Table,
  TableSkeleton,
} from 'ui-components';

import { getScanResultsApiClient, getVulnerabilityApiClient } from '@/api/api';
import {
  ModelVulnerabilityScanConfigLanguageLanguageEnum,
  UtilsReportFiltersNodeTypeEnum,
  UtilsReportFiltersScanTypeEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { FilterHeader } from '@/components/forms/FilterHeader';
import { SearchableClusterList } from '@/components/forms/SearchableClusterList';
import { SearchableContainerList } from '@/components/forms/SearchableContainerList';
import { SearchableHostList } from '@/components/forms/SearchableHostList';
import { SearchableImageList } from '@/components/forms/SearchableImageList';
import { EllipsisIcon } from '@/components/icons/common/Ellipsis';
import { ScanStatusesIcon } from '@/components/icons/common/ScanStatuses';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { SEVERITY_COLORS } from '@/constants/charts';
import { useDownloadScan } from '@/features/common/data-component/downloadScanAction';
import { IconMapForNodeType } from '@/features/onboard/components/IconMapForNodeType';
import { SuccessModalContent } from '@/features/settings/components/SuccessModalContent';
import { SbomModal } from '@/features/vulnerabilities/api/sbomApiLoader';
import { invalidateAllQueries, queries } from '@/queries';
import { ScanTypeEnum } from '@/types/common';
import { apiWrapper } from '@/utils/api';
import { formatMilliseconds } from '@/utils/date';
import { download } from '@/utils/download';
import { isScanComplete } from '@/utils/scan';
import { useSortingState } from '@/utils/table';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}

enum ActionEnumType {
  DELETE = 'delete',
  DOWNLOAD_SBOM = 'downloadSBOM',
}

const PAGE_SIZE = 15;

const packages = [
  // {
  //   name: 'OS Packages',
  //   checked: false,
  //   value: ModelVulnerabilityScanConfigLanguageLanguageEnum.OsPackages,
  // },
  {
    name: 'Java',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Java,
  },
  {
    name: 'Javascript',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Javascript,
  },
  {
    name: 'Rust',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Rust,
  },
  {
    name: 'GoLang',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Golang,
  },
  {
    name: 'Ruby',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Ruby,
  },
  {
    name: 'Python',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Python,
  },
  {
    name: 'PHP',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Php,
  },
  {
    name: 'Dotnet',
    checked: false,
    value: ModelVulnerabilityScanConfigLanguageLanguageEnum.Dotnet,
  },
];

const getStatusSearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('status').map((status) => status.toUpperCase());
};
const getHostsSearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('hosts');
};
const getContainersSearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('containers');
};
const getContainerImagesSearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('containerImages');
};
const getLanguagesSearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('languages');
};
const getClustersSearch = (searchParams: URLSearchParams) => {
  return searchParams.getAll('clusters');
};

const action = async ({
  request,
}: ActionFunctionArgs): Promise<
  | {
      url: string;
    }
  | null
  | { success?: boolean; message?: string }
> => {
  const formData = await request.formData();
  const actionType = formData.get('actionType');
  const scanId = formData.get('scanId');
  const nodeId = formData.get('nodeId');
  if (!actionType || !scanId || !nodeId) {
    throw new Error('Invalid action');
  }

  if (actionType === ActionEnumType.DELETE) {
    const resultApi = apiWrapper({
      fn: getScanResultsApiClient().deleteScanResultsForScanID,
    });
    const result = await resultApi({
      scanId: scanId.toString(),
      scanType: ScanTypeEnum.VulnerabilityScan,
    });
    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        return {
          success: false,
          message: result.error.message ?? '',
        };
      } else if (result.error.response.status === 403) {
        return {
          success: false,
          message: 'You do not have enough permissions to delete scan',
        };
      }
    }
    invalidateAllQueries();
    return {
      success: true,
    };
  } else if (actionType === ActionEnumType.DOWNLOAD_SBOM) {
    const resultApi = apiWrapper({
      fn: getVulnerabilityApiClient().downloadSBOM,
    });
    const result = await resultApi({
      modelSbomRequest: { scan_id: scanId.toString() },
    });
    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        toast.error(result.error.message || 'Something went wrong');
        return {
          success: false,
          message: result.error.message ?? '',
        };
      }
    } else {
      const url = result.value.url_link;
      if (url) {
        download(url);
      } else {
        toast.error('Something went wrong');
      }
    }
    invalidateAllQueries();

    return null;
  }
  return null;
};

const FilterIcon = () => {
  return (
    <svg
      width="14"
      height="14"
      viewBox="0 0 14 14"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12.8334 4.27783H1.16672C0.951944 4.27783 0.777832 4.45194 0.777832 4.66672C0.777832 4.8815 0.951944 5.05561 1.16672 5.05561H12.8334C13.0482 5.05561 13.2223 4.8815 13.2223 4.66672C13.2223 4.45194 13.0482 4.27783 12.8334 4.27783ZM10.8889 6.61117H3.11117C2.89639 6.61117 2.72228 6.78528 2.72228 7.00005C2.72228 7.21483 2.89639 7.38894 3.11117 7.38894H10.8889C11.1037 7.38894 11.2778 7.21483 11.2778 7.00005C11.2778 6.78528 11.1037 6.61117 10.8889 6.61117ZM5.05561 8.9445H8.9445C9.15928 8.9445 9.33339 9.11861 9.33339 9.33339C9.33339 9.54817 9.15928 9.72228 8.9445 9.72228H5.05561C4.84083 9.72228 4.66672 9.54817 4.66672 9.33339C4.66672 9.11861 4.84083 8.9445 5.05561 8.9445Z"
        fill="currentColor"
      />
    </svg>
  );
};
const DeleteConfirmationModal = ({
  showDialog,
  scanId,
  nodeId,
  setShowDialog,
}: {
  showDialog: boolean;
  scanId: string;
  nodeId: string;
  setShowDialog: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const fetcher = useFetcher();

  const onDeleteAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      formData.append('scanId', scanId);
      formData.append('nodeId', nodeId);
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [scanId, nodeId, fetcher],
  );

  return (
    <Modal open={showDialog} onOpenChange={() => setShowDialog(false)}>
      {!fetcher.data?.success ? (
        <div className="grid place-items-center p-6">
          <IconContext.Provider
            value={{
              className: 'mb-3 dark:text-red-600 text-red-400 w-[70px] h-[70px]',
            }}
          >
            <HiOutlineExclamationCircle />
          </IconContext.Provider>
          <h3 className="mb-4 font-normal text-center text-sm">
            Selected scan will be deleted.
            <br />
            <span>Are you sure you want to delete?</span>
          </h3>
          {fetcher.data?.message && (
            <p className="text-sm text-red-500 pb-3">{fetcher.data?.message}</p>
          )}
          <div className="flex items-center justify-right gap-4">
            <Button size="xs" onClick={() => setShowDialog(false)} type="button" outline>
              No, Cancel
            </Button>
            <Button
              size="xs"
              color="danger"
              onClick={(e) => {
                e.preventDefault();
                onDeleteAction(ActionEnumType.DELETE);
              }}
            >
              Yes, I&apos;m sure
            </Button>
          </div>
        </div>
      ) : (
        <SuccessModalContent text="Scan deleted successfully!" />
      )}
    </Modal>
  );
};

const ActionDropdown = ({
  trigger,
  scanId,
  nodeId,
  scanStatus,
  nodeType,
  setShowDeleteDialog,
  setScanIdToDelete,
  setNodeIdToDelete,
  setSelectedNode,
}: {
  trigger: React.ReactNode;
  scanId: string;
  nodeId: string;
  nodeType: string;
  scanStatus: string;
  setShowDeleteDialog: React.Dispatch<React.SetStateAction<boolean>>;
  setScanIdToDelete: React.Dispatch<React.SetStateAction<string>>;
  setNodeIdToDelete: React.Dispatch<React.SetStateAction<string>>;
  setSelectedNode: React.Dispatch<
    React.SetStateAction<{
      nodeName: string;
      scanId: string;
    } | null>
  >;
}) => {
  const fetcher = useFetcher();
  const [open, setOpen] = useState(false);
  const { downloadScan } = useDownloadScan();
  const onDownloadAction = useCallback(
    (actionType?: ActionEnumType) => {
      if (!actionType) {
        downloadScan({
          nodeType: nodeType as UtilsReportFiltersNodeTypeEnum,
          scanId,
          scanType: UtilsReportFiltersScanTypeEnum.Vulnerability,
        });
        return;
      }
      const formData = new FormData();
      formData.append('actionType', actionType);
      formData.append('scanId', scanId);
      formData.append('nodeId', nodeId);
      formData.append('nodeType', nodeType);
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [scanId, nodeId, fetcher],
  );

  useEffect(() => {
    if (fetcher.state === 'idle') setOpen(false);
  }, [fetcher]);

  return (
    <Dropdown
      triggerAsChild
      align="start"
      open={open}
      onOpenChange={setOpen}
      content={
        <>
          <DropdownItem
            onClick={(e) => {
              if (!isScanComplete(scanStatus)) return;
              e.preventDefault();
              onDownloadAction();
            }}
          >
            Download Report
          </DropdownItem>
          <DropdownItem
            onClick={(e) => {
              if (!isScanComplete(scanStatus)) return;
              e.preventDefault();
              onDownloadAction(ActionEnumType.DOWNLOAD_SBOM);
            }}
          >
            Download SBOM
          </DropdownItem>
          <DropdownItem
            onClick={(e) => {
              e.preventDefault();
              if (!isScanComplete(scanStatus)) return;
              setSelectedNode({
                scanId,
                nodeName: nodeId,
              });
            }}
          >
            View SBOM
          </DropdownItem>
          <DropdownItem
            onClick={() => {
              setScanIdToDelete(scanId);
              setNodeIdToDelete(nodeId);
              setShowDeleteDialog(true);
            }}
          >
            <span className="flex items-center text-red-700 dark:text-status-error">
              Delete
            </span>
          </DropdownItem>
        </>
      }
    >
      {trigger}
    </Dropdown>
  );
};

const ScansTable = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const { data } = useSuspenseQuery({
    ...queries.vulnerability.scanList({
      pageSize: PAGE_SIZE,
      clusters: getClustersSearch(searchParams),
      containers: getContainersSearch(searchParams),
      descending: searchParams.get('desc') === 'true',
      hosts: getHostsSearch(searchParams),
      images: getContainerImagesSearch(searchParams),
      languages: getLanguagesSearch(searchParams),
      nodeTypes: searchParams.getAll('nodeType').length
        ? searchParams.getAll('nodeType')
        : ['container_image', 'container', 'host'],
      page: parseInt(searchParams.get('page') ?? '0', 10),
      sortBy: searchParams.get('sortby'),
      status: getStatusSearch(searchParams),
    }),
    keepPreviousData: true,
  });
  const [sort, setSort] = useSortingState();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [scanIdToDelete, setScanIdToDelete] = useState('');
  const [nodeIdToDelete, setNodeIdToDelete] = useState('');

  const [selectedNode, setSelectedNode] = useState<{
    nodeName: string;
    scanId: string;
  } | null>(null);

  const columnHelper = createColumnHelper<NonNullable<typeof data>['scans'][number]>();

  const columns = useMemo(() => {
    const columns = [
      columnHelper.display({
        id: 'actions',
        enableSorting: false,
        cell: (cell) => (
          <ActionDropdown
            scanId={cell.row.original.scan_id}
            nodeId={cell.row.original.node_id}
            nodeType={cell.row.original.node_type}
            scanStatus={cell.row.original.status}
            setScanIdToDelete={setScanIdToDelete}
            setNodeIdToDelete={setNodeIdToDelete}
            setShowDeleteDialog={setShowDeleteDialog}
            setSelectedNode={setSelectedNode}
            trigger={
              <button className="p-1">
                <span className="block h-4 w-4 dark:text-text-text-and-icon rotate-90">
                  <EllipsisIcon />
                </span>
              </button>
            }
          />
        ),
        header: () => '',
        size: 30,
        minSize: 30,
        maxSize: 50,
        enableResizing: false,
      }),
      columnHelper.accessor('node_type', {
        cell: (info) => {
          return (
            <div className="flex items-center gap-x-2">
              <div className="p-1.5 rounded-lg">
                <IconContext.Provider value={{ className: 'w-4 h-4' }}>
                  {IconMapForNodeType[info.getValue()]}
                </IconContext.Provider>
              </div>
              <span className="flex-1 truncate capitalize">
                {info.getValue()?.replaceAll('_', ' ')}
              </span>
            </div>
          );
        },
        header: () => 'Type',
        minSize: 110,
        size: 120,
        maxSize: 130,
      }),
      columnHelper.accessor('node_name', {
        cell: (info) => {
          const isNeverScan = info.row.original.status?.toLowerCase() === '';
          const WrapperComponent = ({ children }: { children: React.ReactNode }) => {
            return isNeverScan ? (
              <>{children}</>
            ) : (
              <DFLink
                to={generatePath(`/vulnerability/scan-results/:scanId`, {
                  scanId: info.row.original.scan_id,
                })}
              >
                {children}
              </DFLink>
            );
          };
          return (
            <WrapperComponent>
              <div className="flex items-center gap-x-2 truncate">
                <span className="truncate">{info.getValue()}</span>
              </div>
            </WrapperComponent>
          );
        },
        header: () => 'Name',
        minSize: 230,
        size: 240,
        maxSize: 250,
      }),
      columnHelper.accessor('updated_at', {
        cell: (info) => (
          <div className="flex items-center">
            <span className="truncate">{formatMilliseconds(info.getValue())}</span>
          </div>
        ),
        header: () => 'Timestamp',
        minSize: 140,
        size: 140,
        maxSize: 150,
      }),
      columnHelper.accessor('status', {
        cell: (info) => {
          return ScanStatusesIcon(info.getValue().toUpperCase());
        },
        header: () => 'Scan Status',
        minSize: 100,
        size: 110,
        maxSize: 110,
        enableResizing: false,
      }),
      columnHelper.accessor('total', {
        cell: (info) => (
          <div className="flex items-center justify-end tabular-nums">
            <span className="truncate">{info.getValue()}</span>
          </div>
        ),
        header: () => <div className="text-right truncate">Total</div>,
        minSize: 80,
        size: 80,
        maxSize: 80,
      }),
      columnHelper.accessor('critical', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <span className="truncate">{info.getValue()}</span>
            <div
              className="w-3 h-3 rounded-full"
              style={{
                backgroundColor: SEVERITY_COLORS['critical'],
              }}
            ></div>
          </div>
        ),
        header: () => 'Critical',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('high', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <span className="truncate">{info.getValue()}</span>
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['high'],
              }}
            ></div>
          </div>
        ),
        header: () => 'High',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('medium', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <span className="truncate">{info.getValue()}</span>
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['medium'],
              }}
            ></div>
          </div>
        ),
        header: () => 'Medium',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('low', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <span className="truncate">{info.getValue()}</span>
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['low'],
              }}
            ></div>
          </div>
        ),
        header: () => 'Low',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
      columnHelper.accessor('unknown', {
        cell: (info) => (
          <div className="flex items-center justify-end gap-x-2 tabular-nums">
            <span className="truncate">{info.getValue()}</span>
            <div
              className="w-3 h-3 rounded-full shrink-0"
              style={{
                backgroundColor: SEVERITY_COLORS['unknown'],
              }}
            ></div>
          </div>
        ),
        header: () => 'Unknown',
        minSize: 80,
        size: 80,
        maxSize: 80,
        enableResizing: false,
      }),
    ];

    return columns;
  }, []);

  return (
    <>
      {showDeleteDialog && (
        <DeleteConfirmationModal
          showDialog={showDeleteDialog}
          scanId={scanIdToDelete}
          nodeId={nodeIdToDelete}
          setShowDialog={setShowDeleteDialog}
        />
      )}
      {selectedNode ? (
        <SbomModal
          scanId={selectedNode.scanId}
          nodeName={selectedNode.nodeName}
          onClose={() => {
            setSelectedNode(null);
          }}
        />
      ) : null}
      <div className="flex py-3">
        <Button variant="flat" className="ml-auto" startIcon={<FilterIcon />} size="sm">
          Filter
        </Button>
      </div>
      <Table
        data={data.scans}
        columns={columns}
        enablePagination
        manualPagination
        enableColumnResizing
        approximatePagination
        totalRows={data.totalRows}
        pageSize={PAGE_SIZE}
        pageIndex={data.currentPage}
        onPaginationChange={(updaterOrValue) => {
          let newPageIndex = 0;
          if (typeof updaterOrValue === 'function') {
            newPageIndex = updaterOrValue({
              pageIndex: data.currentPage,
              pageSize: PAGE_SIZE,
            }).pageIndex;
          } else {
            newPageIndex = updaterOrValue.pageIndex;
          }
          setSearchParams((prev) => {
            prev.set('page', String(newPageIndex));
            return prev;
          });
        }}
        enableSorting
        manualSorting
        sortingState={sort}
        onSortingChange={(updaterOrValue) => {
          let newSortState: SortingState = [];
          if (typeof updaterOrValue === 'function') {
            newSortState = updaterOrValue(sort);
          } else {
            newSortState = updaterOrValue;
          }
          setSearchParams((prev) => {
            if (!newSortState.length) {
              prev.delete('sortby');
              prev.delete('desc');
            } else {
              prev.set('sortby', String(newSortState[0].id));
              prev.set('desc', String(newSortState[0].desc));
            }
            return prev;
          });
          setSort(newSortState);
        }}
      />
    </>
  );
};

const VulnerabilityScans = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const elementToFocusOnClose = useRef(null);
  const isFetching = useIsFetching({
    queryKey: queries.vulnerability.scanList._def,
  });

  const isFilterApplied =
    searchParams.has('languages') ||
    searchParams.has('containerImages') ||
    searchParams.has('containers') ||
    searchParams.has('nodeType') ||
    searchParams.has('hosts') ||
    searchParams.has('clusters');

  const onResetFilters = () => {
    setSearchParams(() => {
      return {};
    });
  };

  return (
    <div>
      <div className="flex pl-6 pr-4 py-2 w-full items-center bg-white dark:bg-bg-breadcrumb-bar">
        <Breadcrumb>
          <BreadcrumbLink asChild icon={<VulnerabilityIcon />} isLink>
            <DFLink to={'/vulnerability'} unstyled>
              Vulnerabilities
            </DFLink>
          </BreadcrumbLink>
          <BreadcrumbLink>
            <span className="inherit cursor-auto">Vulnerability Scan</span>
          </BreadcrumbLink>
        </Breadcrumb>
        <span className="ml-2">{isFetching ? <CircleSpinner size="sm" /> : null}</span>
        <div className="ml-auto flex gap-x-4">
          <div className="relative gap-x-4">
            {isFilterApplied && (
              <span className="absolute -left-[2px] -top-[2px] inline-flex h-2 w-2 rounded-full bg-blue-400 opacity-75"></span>
            )}
            <Popover
              triggerAsChild
              elementToFocusOnCloseRef={elementToFocusOnClose}
              content={
                <div className="dark:text-white">
                  <FilterHeader onReset={onResetFilters} />
                  <Form className="flex flex-col gap-y-4 p-4">
                    <fieldset>
                      <legend className="text-sm font-medium">Type</legend>
                      <div className="flex gap-x-4 mt-1">
                        <Checkbox
                          label="Host"
                          checked={searchParams.getAll('nodeType').includes('host')}
                          onCheckedChange={(state) => {
                            if (state) {
                              setSearchParams((prev) => {
                                prev.append('nodeType', 'host');
                                prev.delete('page');
                                return prev;
                              });
                            } else {
                              setSearchParams((prev) => {
                                const prevStatuses = prev.getAll('nodeType');
                                prev.delete('nodeType');
                                prevStatuses
                                  .filter((status) => status !== 'host')
                                  .forEach((status) => {
                                    prev.append('nodeType', status);
                                  });
                                prev.delete('page');
                                return prev;
                              });
                            }
                          }}
                        />
                        <Checkbox
                          label="Container"
                          checked={searchParams.getAll('nodeType').includes('container')}
                          onCheckedChange={(state) => {
                            if (state) {
                              setSearchParams((prev) => {
                                prev.append('nodeType', 'container');
                                prev.delete('page');
                                return prev;
                              });
                            } else {
                              setSearchParams((prev) => {
                                const prevStatuses = prev.getAll('nodeType');
                                prev.delete('nodeType');
                                prevStatuses
                                  .filter((status) => status !== 'container')
                                  .forEach((status) => {
                                    prev.append('nodeType', status);
                                  });
                                prev.delete('page');
                                return prev;
                              });
                            }
                          }}
                        />
                        <Checkbox
                          label="Container Images"
                          checked={searchParams
                            .getAll('nodeType')
                            .includes('container_image')}
                          onCheckedChange={(state) => {
                            if (state) {
                              setSearchParams((prev) => {
                                prev.append('nodeType', 'container_image');
                                prev.delete('page');
                                return prev;
                              });
                            } else {
                              setSearchParams((prev) => {
                                const prevStatuses = prev.getAll('nodeType');
                                prev.delete('page');
                                prev.delete('nodeType');
                                prevStatuses
                                  .filter((status) => status !== 'container_image')
                                  .forEach((status) => {
                                    prev.append('nodeType', status);
                                  });
                                return prev;
                              });
                            }
                          }}
                        />
                      </div>
                    </fieldset>
                    <fieldset>
                      <legend className="text-sm font-medium">Status</legend>
                      <div className="flex gap-x-4 mt-1">
                        <Checkbox
                          label="Completed"
                          checked={searchParams.getAll('status').includes('complete')}
                          onCheckedChange={(state) => {
                            if (state) {
                              setSearchParams((prev) => {
                                prev.append('status', 'complete');
                                prev.delete('page');
                                return prev;
                              });
                            } else {
                              setSearchParams((prev) => {
                                const prevStatuses = prev.getAll('status');
                                prev.delete('status');
                                prev.delete('page');
                                prevStatuses
                                  .filter((status) => status !== 'complete')
                                  .forEach((status) => {
                                    prev.append('status', status);
                                  });
                                return prev;
                              });
                            }
                          }}
                        />
                        <Checkbox
                          label="In Progress"
                          checked={searchParams.getAll('status').includes('in_progress')}
                          onCheckedChange={(state) => {
                            if (state) {
                              setSearchParams((prev) => {
                                prev.append('status', 'in_progress');
                                prev.delete('page');
                                return prev;
                              });
                            } else {
                              setSearchParams((prev) => {
                                const prevStatuses = prev.getAll('status');
                                prev.delete('status');
                                prevStatuses
                                  .filter((status) => status !== 'in_progress')
                                  .forEach((status) => {
                                    prev.append('status', status);
                                  });
                                prev.delete('page');
                                return prev;
                              });
                            }
                          }}
                        />
                        <Checkbox
                          label="Error"
                          checked={searchParams.getAll('status').includes('error')}
                          onCheckedChange={(state) => {
                            if (state) {
                              setSearchParams((prev) => {
                                prev.append('status', 'error');
                                prev.delete('page');
                                return prev;
                              });
                            } else {
                              setSearchParams((prev) => {
                                const prevStatuses = prev.getAll('status');
                                prev.delete('status');
                                prev.delete('page');
                                prevStatuses
                                  .filter((status) => status !== 'error')
                                  .forEach((status) => {
                                    prev.append('status', status);
                                  });
                                return prev;
                              });
                            }
                          }}
                        />
                      </div>
                    </fieldset>
                    <fieldset>
                      <Select
                        noPortal
                        name="language"
                        label={'Language'}
                        placeholder="Select language"
                        value={searchParams.getAll('languages')}
                        sizing="xs"
                        onChange={(value) => {
                          setSearchParams((prev) => {
                            prev.delete('languages');
                            value.forEach((language) => {
                              prev.append('languages', language);
                            });
                            prev.delete('page');
                            return prev;
                          });
                        }}
                      >
                        {packages.map((pkg: { name: string }) => {
                          return <SelectItem value={pkg.name} key={pkg.name} />;
                        })}
                      </Select>
                    </fieldset>
                    <fieldset>
                      <SearchableHostList
                        scanType={ScanTypeEnum.VulnerabilityScan}
                        defaultSelectedHosts={searchParams.getAll('hosts')}
                        onChange={(value) => {
                          setSearchParams((prev) => {
                            prev.delete('hosts');
                            value.forEach((host) => {
                              prev.append('hosts', host);
                            });
                            prev.delete('page');
                            return prev;
                          });
                        }}
                      />
                    </fieldset>
                    <fieldset>
                      <SearchableContainerList
                        scanType={ScanTypeEnum.VulnerabilityScan}
                        defaultSelectedContainers={searchParams.getAll('containers')}
                        reset={!isFilterApplied}
                        onChange={(value) => {
                          setSearchParams((prev) => {
                            prev.delete('containers');
                            value.forEach((container) => {
                              prev.append('containers', container);
                            });
                            prev.delete('page');
                            return prev;
                          });
                        }}
                      />
                    </fieldset>
                    <fieldset>
                      <SearchableImageList
                        scanType={ScanTypeEnum.VulnerabilityScan}
                        defaultSelectedImages={searchParams.getAll('containerImages')}
                        reset={!isFilterApplied}
                        onChange={(value) => {
                          setSearchParams((prev) => {
                            prev.delete('containerImages');
                            value.forEach((containerImage) => {
                              prev.append('containerImages', containerImage);
                            });
                            prev.delete('page');
                            return prev;
                          });
                        }}
                      />
                    </fieldset>
                    <fieldset>
                      <SearchableClusterList
                        defaultSelectedClusters={searchParams.getAll('clusters')}
                        reset={!isFilterApplied}
                        onChange={(value) => {
                          setSearchParams((prev) => {
                            prev.delete('clusters');
                            value.forEach((cluster) => {
                              prev.append('clusters', cluster);
                            });
                            prev.delete('page');
                            return prev;
                          });
                        }}
                      />
                    </fieldset>
                  </Form>
                </div>
              }
            >
              <IconButton
                className="ml-auto rounded-lg"
                size="xs"
                outline
                color="primary"
                ref={elementToFocusOnClose}
                icon={<FiFilter />}
              />
            </Popover>
          </div>
        </div>
      </div>

      <div className="m-2">
        <Suspense fallback={<TableSkeleton columns={11} rows={15} />}>
          <ScansTable />
        </Suspense>
      </div>
    </div>
  );
};

export const module = {
  action,
  element: <VulnerabilityScans />,
};

import { Suspense } from 'react';
import { HiOutlineChevronRight, HiOutlineCube } from 'react-icons/hi';
import { IconContext } from 'react-icons/lib';
import { useLoaderData } from 'react-router-dom';

import { getSearchApiClient } from '@/api/api';
import { ModelNodeIdentifierNodeTypeEnum } from '@/api/generated';
import { LinkButton } from '@/components/LinkButton';
import { TopAttackPaths } from '@/features/vulnerabilities/components/landing/TopAttackPaths';
import { TopNVulnerableCard } from '@/features/vulnerabilities/components/landing/TopNVulnerableCard';
import { TopNVulnerableChartData } from '@/features/vulnerabilities/components/landing/TopNVulnerableChart';
import {
  VulnerabilitiesCountsCard,
  VulnerabilitiesCountsCardData,
} from '@/features/vulnerabilities/components/landing/VulnerabilitiesCountsCard';
import { apiWrapper } from '@/utils/api';
import { typedDefer, TypedDeferredData } from '@/utils/router';
import { DFAwait } from '@/utils/suspense';

async function getTop5VulnerableAssetsData(nodeType: 'image' | 'host' | 'container') {
  const top5NodesApi = apiWrapper({
    fn: {
      [ModelNodeIdentifierNodeTypeEnum.Image]: getSearchApiClient().searchContainerImages,
      [ModelNodeIdentifierNodeTypeEnum.Host]: getSearchApiClient().searchHosts,
      [ModelNodeIdentifierNodeTypeEnum.Container]: getSearchApiClient().searchContainers,
    }[nodeType],
  });
  const top5Nodes = await top5NodesApi({
    searchSearchNodeReq: {
      node_filter: {
        filters: {
          contains_filter: {
            filter_in: {
              pseudo: [false],
              active: [true],
              vulnerability_scan_status: ['COMPLETE'],
            },
          },
          match_filter: {
            filter_in: {},
          },
          order_filter: {
            order_fields: [
              {
                field_name: 'vulnerabilities_count',
                descending: true,
              },
            ],
          },
          compare_filter: null,
        },
        in_field_filter: [],
        window: {
          offset: 0,
          size: 0,
        },
      },
      window: {
        offset: 0,
        size: 5,
      },
    },
  });
  if (!top5Nodes.ok) {
    throw new Error('error getting top 5 container images');
  }

  const top5NodeScansApi = apiWrapper({
    fn: getSearchApiClient().searchVulnerabilityScan,
  });
  const top5NodeScans = await top5NodeScansApi({
    searchSearchScanReq: {
      node_filters: {
        filters: {
          compare_filter: [],
          contains_filter: { filter_in: {} },
          match_filter: { filter_in: {} },
          order_filter: { order_fields: [] },
          not_contains_filter: { filter_in: {} },
        },
        in_field_filter: [],
        window: { offset: 0, size: 0 },
      },
      scan_filters: {
        filters: {
          compare_filter: [],
          contains_filter: {
            filter_in: {
              node_id: top5Nodes.value
                .map((node) => node.vulnerability_latest_scan_id)
                .filter((scanId) => {
                  return !!scanId?.length;
                }),
            },
          },
          match_filter: { filter_in: {} },
          order_filter: { order_fields: [] },
          not_contains_filter: { filter_in: {} },
        },
        in_field_filter: [],
        window: { offset: 0, size: 0 },
      },
      window: {
        offset: 0,
        size: 5,
      },
    },
  });

  if (!top5NodeScans.ok) {
    throw new Error('error getting top 5 scans');
  }

  return top5Nodes.value
    .map((node) => {
      const latestScan = top5NodeScans.value.find(
        (scan) => scan.node_id === node.node_id,
      );
      if (!latestScan) {
        return null;
      }
      return {
        name: latestScan.node_name,
        critical: latestScan.severity_counts?.critical ?? 0,
        high: latestScan.severity_counts?.high ?? 0,
        medium: latestScan.severity_counts?.medium ?? 0,
        low: latestScan.severity_counts?.low ?? 0,
        unknown: latestScan.severity_counts?.unknown ?? 0,
      };
    })
    .reduce<
      Array<{
        name: string;
        critical: number;
        high: number;
        medium: number;
        low: number;
        unknown: number;
      }>
    >((acc, curr) => {
      if (curr) {
        acc.push(curr);
      }
      return acc;
    }, []);
}

async function getMostExploitableVulnerabilityCount(): Promise<VulnerabilitiesCountsCardData> {
  const defaultResults: VulnerabilitiesCountsCardData = {
    total: 0,
    severityBreakdown: {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      unknown: 0,
    },
  };

  const searchVulnerabilitiesCountApi = apiWrapper({
    fn: getSearchApiClient().searchVulnerabilitiesCount,
  });
  const mostExploitableVulenrabilityCounts = await searchVulnerabilitiesCountApi({
    searchSearchNodeReq: {
      node_filter: {
        filters: {
          contains_filter: { filter_in: { exploitability_score: [1, 2, 3] } },
          match_filter: { filter_in: {} },
          order_filter: {
            order_fields: [
              {
                field_name: 'exploitability_score',
                descending: true,
              },
              {
                field_name: 'cve_severity',
                descending: false,
              },
            ],
          },
          compare_filter: null,
        },
        in_field_filter: [],
        window: {
          offset: 0,
          size: 0,
        },
      },
      window: {
        offset: 0,
        size: 1000,
      },
    },
  });
  if (!mostExploitableVulenrabilityCounts.ok) {
    // TODO handle error
    return defaultResults;
  }

  return {
    total: mostExploitableVulenrabilityCounts.value.count,
    severityBreakdown: {
      critical: mostExploitableVulenrabilityCounts.value.categories?.['critical'] ?? 0,
      high: mostExploitableVulenrabilityCounts.value.categories?.['high'] ?? 0,
      medium: mostExploitableVulenrabilityCounts.value.categories?.['medium'] ?? 0,
      low: mostExploitableVulenrabilityCounts.value.categories?.['low'] ?? 0,
      unknown: mostExploitableVulenrabilityCounts.value.categories?.['unknown'] ?? 0,
    },
  };
}

async function getUniqueVulenrabilityCount(): Promise<VulnerabilitiesCountsCardData> {
  const defaultResults: VulnerabilitiesCountsCardData = {
    total: 0,
    severityBreakdown: {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      unknown: 0,
    },
  };
  const searchVulnerabilitiesCountApi = apiWrapper({
    fn: getSearchApiClient().searchVulnerabilitiesCount,
  });
  const uniqueVulenrabilityCounts = await searchVulnerabilitiesCountApi({
    searchSearchNodeReq: {
      node_filter: {
        filters: {
          contains_filter: { filter_in: {} },
          match_filter: { filter_in: {} },
          order_filter: { order_fields: [] },
          compare_filter: null,
        },
        in_field_filter: [],
        window: {
          offset: 0,
          size: 0,
        },
      },
      window: {
        offset: 0,
        size: 999999999,
      },
    },
  });

  if (!uniqueVulenrabilityCounts.ok) {
    // TODO handle error
    return defaultResults;
  }

  return {
    total: uniqueVulenrabilityCounts.value.count,
    severityBreakdown: {
      critical: uniqueVulenrabilityCounts.value.categories?.['critical'] ?? 0,
      high: uniqueVulenrabilityCounts.value.categories?.['high'] ?? 0,
      medium: uniqueVulenrabilityCounts.value.categories?.['medium'] ?? 0,
      low: uniqueVulenrabilityCounts.value.categories?.['low'] ?? 0,
      unknown: uniqueVulenrabilityCounts.value.categories?.['unknown'] ?? 0,
    },
  };
}

type LoaderData = {
  imageSeverityResults: Array<TopNVulnerableChartData>;
  hostSeverityResults: Array<TopNVulnerableChartData>;
  containerSeverityResults: Array<TopNVulnerableChartData>;
  uniqueVulenrabilityCounts: VulnerabilitiesCountsCardData;
  mostExploitableVulnerabilityCounts: VulnerabilitiesCountsCardData;
};

const loader = async (): Promise<TypedDeferredData<LoaderData>> => {
  return typedDefer({
    imageSeverityResults: getTop5VulnerableAssetsData('image'),
    hostSeverityResults: getTop5VulnerableAssetsData('host'),
    containerSeverityResults: getTop5VulnerableAssetsData('container'),
    uniqueVulenrabilityCounts: getUniqueVulenrabilityCount(),
    mostExploitableVulnerabilityCounts: getMostExploitableVulnerabilityCount(),
  });
};

const Vulnerability = () => {
  const loaderData = useLoaderData() as LoaderData;
  return (
    <div>
      <div className="flex p-2 items-center w-full shadow bg-white dark:bg-gray-800 h-10">
        <span className="text-md font-medium text-gray-700 dark:text-gray-200">
          Vulnerabilities
        </span>
        <div className="ml-auto">
          <LinkButton to="/vulnerability/rbom">
            <div className="flex items-center rounded-lg border border-gray-200 dark:border-gray-700 pr-2 overflow-hidden">
              <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900 flex items-center justify-center rounded-l-md mr-3">
                <IconContext.Provider
                  value={{
                    className: 'w-5 h-5 text-blue-600 dark:text-blue-400',
                  }}
                >
                  <HiOutlineCube />
                </IconContext.Provider>
              </div>

              <>
                Runtime BOM&nbsp;
                <HiOutlineChevronRight />
              </>
            </div>
          </LinkButton>
        </div>
      </div>
      <div className="p-2 grid grid-cols-12 gap-2">
        <div className="col-span-4">
          <Suspense
            fallback={
              <TopNVulnerableCard
                title="Top Vulnerable Containers"
                link="/vulnerability/scans?nodeType=container"
                data={[]}
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.containerSeverityResults}>
              {(resolvedData: LoaderData['containerSeverityResults']) => {
                return (
                  <TopNVulnerableCard
                    title="Top Vulnerable Containers"
                    link="/vulnerability/scans?nodeType=container"
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>
        <div className="col-span-4">
          <Suspense
            fallback={
              <TopNVulnerableCard
                title="Top Vulnerable Hosts"
                link="/vulnerability/scans?nodeType=host"
                data={[]}
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.hostSeverityResults}>
              {(resolvedData: LoaderData['hostSeverityResults']) => {
                return (
                  <TopNVulnerableCard
                    title="Top Vulnerable Hosts"
                    link="/vulnerability/scans?nodeType=host"
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>
        <div className="col-span-4">
          <Suspense
            fallback={
              <TopNVulnerableCard
                title="Top Vulnerable Container Images"
                link="/vulnerability/scans?nodeType=container_image"
                data={[]}
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.imageSeverityResults}>
              {(resolvedData: LoaderData['imageSeverityResults']) => {
                return (
                  <TopNVulnerableCard
                    title="Top Vulnerable Container Images"
                    link="/vulnerability/scans?nodeType=container_image"
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>

        <div className="col-span-6">
          <TopAttackPaths />
        </div>

        <div className="col-span-3">
          <Suspense
            fallback={
              <VulnerabilitiesCountsCard
                title="Unique Vulnerabilities"
                detailsLink="/vulnerability/unique-vulnerabilities"
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.uniqueVulenrabilityCounts}>
              {(resolvedData: VulnerabilitiesCountsCardData) => {
                return (
                  <VulnerabilitiesCountsCard
                    title="Unique Vulnerabilities"
                    detailsLink="/vulnerability/unique-vulnerabilities"
                    loading={false}
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>

        <div className="col-span-3">
          <Suspense
            fallback={
              <VulnerabilitiesCountsCard
                title="Most Exploitable Vulnerabilities"
                detailsLink="/vulnerability/most-exploitable"
                loading
              />
            }
          >
            <DFAwait resolve={loaderData.mostExploitableVulnerabilityCounts}>
              {(resolvedData: VulnerabilitiesCountsCardData) => {
                return (
                  <VulnerabilitiesCountsCard
                    title="Most Exploitable Vulnerabilities"
                    detailsLink="/vulnerability/most-exploitable"
                    loading={false}
                    data={resolvedData}
                  />
                );
              }}
            </DFAwait>
          </Suspense>
        </div>
      </div>
    </div>
  );
};

export const module = {
  loader,
  element: <Vulnerability />,
};

import { useSuspenseQuery } from '@suspensive/react-query';
import { capitalize } from 'lodash-es';
import { Suspense, useCallback, useEffect, useMemo, useState } from 'react';
import {
  ActionFunctionArgs,
  generatePath,
  Outlet,
  useFetcher,
  useParams,
  useSearchParams,
} from 'react-router-dom';
import { toast } from 'sonner';
import {
  Badge,
  Breadcrumb,
  BreadcrumbLink,
  Button,
  Card,
  CircleSpinner,
  Combobox,
  ComboboxOption,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  DropdownSeparator,
  getRowSelectionColumn,
  Modal,
  RowSelectionState,
  SortingState,
  Table,
  TableSkeleton,
} from 'ui-components';

import { getScanResultsApiClient } from '@/api/api';
import {
  ModelVulnerability,
  UtilsReportFiltersNodeTypeEnum,
  UtilsReportFiltersScanTypeEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import { FilterBadge } from '@/components/filters/FilterBadge';
import {
  HeaderSkeleton,
  RectSkeleton,
  SquareSkeleton,
  TimestampSkeleton,
} from '@/components/header/HeaderSkeleton';
import { BellLineIcon } from '@/components/icons/common/BellLine';
import { CaretDown } from '@/components/icons/common/CaretDown';
import { EllipsisIcon } from '@/components/icons/common/Ellipsis';
import { ErrorStandardLineIcon } from '@/components/icons/common/ErrorStandardLine';
import { EyeHideSolid } from '@/components/icons/common/EyeHideSolid';
import { EyeSolidIcon } from '@/components/icons/common/EyeSolid';
import { FilterIcon } from '@/components/icons/common/Filter';
import { PopOutIcon } from '@/components/icons/common/PopOut';
import { TimesIcon } from '@/components/icons/common/Times';
import { TrashLineIcon } from '@/components/icons/common/TrashLine';
import { ScanHistoryList } from '@/components/scan-history/HistoryList';
import { ScanStatusInError, ScanStatusInProgress } from '@/components/ScanStatusMessage';
import { CveCVSSScore, SeverityBadge } from '@/components/SeverityBadge';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { SEVERITY_COLORS } from '@/constants/charts';
import { useDownloadScan } from '@/features/common/data-component/downloadScanAction';
import { SuccessModalContent } from '@/features/settings/components/SuccessModalContent';
import { VulnerabilityScanResultsPieChart } from '@/features/vulnerabilities/components/ScanResults/VulnerabilityScanResultsPieChart';
import { invalidateAllQueries, queries } from '@/queries';
import { ScanStatusEnum, ScanTypeEnum, VulnerabilitySeverityType } from '@/types/common';
import { apiWrapper } from '@/utils/api';
import { formatMilliseconds } from '@/utils/date';
import { abbreviateNumber } from '@/utils/number';
import {
  getOrderFromSearchParams,
  getPageFromSearchParams,
  useSortingState,
} from '@/utils/table';
import { usePageNavigation } from '@/utils/usePageNavigation';

enum ActionEnumType {
  MASK = 'mask',
  UNMASK = 'unmask',
  DELETE = 'delete',
  NOTIFY = 'notify',
  DELETE_SCAN = 'delete_scan',
}

const DEFAULT_PAGE_SIZE = 10;

type ActionFunctionType =
  | ReturnType<typeof getScanResultsApiClient>['deleteScanResult']
  | ReturnType<typeof getScanResultsApiClient>['maskScanResult']
  | ReturnType<typeof getScanResultsApiClient>['notifyScanResult']
  | ReturnType<typeof getScanResultsApiClient>['unmaskScanResult'];

type ActionData = {
  success: boolean;
  message?: string;
} | null;

const action = async ({
  params: { scanId = '' },
  request,
}: ActionFunctionArgs): Promise<ActionData> => {
  const formData = await request.formData();
  const nodeIds = (formData.getAll('nodeIds[]') ?? []) as string[];
  const actionType = formData.get('actionType');
  const _scanId = scanId;
  const mask = formData.get('maskHostAndImages');
  if (!_scanId) {
    throw new Error('Scan ID is required');
  }
  if (!actionType) {
    return null;
  }

  let result = null;
  let apiFunction: ActionFunctionType | null = null;
  if (actionType === ActionEnumType.DELETE || actionType === ActionEnumType.NOTIFY) {
    apiFunction =
      actionType === ActionEnumType.DELETE
        ? getScanResultsApiClient().deleteScanResult
        : getScanResultsApiClient().notifyScanResult;

    const apiFunctionApi = apiWrapper({
      fn: apiFunction,
    });
    result = await apiFunctionApi({
      modelScanResultsActionRequest: {
        result_ids: [...nodeIds],
        scan_id: _scanId,
        scan_type: ScanTypeEnum.VulnerabilityScan,
      },
    });

    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        return {
          success: false,
          message: result.error.message ?? '',
        };
      } else if (result.error.response.status === 403) {
        if (actionType === ActionEnumType.DELETE) {
          return {
            success: false,
            message: 'You do not have enough permissions to delete vulnerability',
          };
        } else if (actionType === ActionEnumType.NOTIFY) {
          return {
            success: false,
            message: 'You do not have enough permissions to notify',
          };
        }
      }
    }
  } else if (actionType === ActionEnumType.MASK || actionType === ActionEnumType.UNMASK) {
    apiFunction =
      actionType === ActionEnumType.MASK
        ? getScanResultsApiClient().maskScanResult
        : getScanResultsApiClient().unmaskScanResult;
    const apiFunctionApi = apiWrapper({
      fn: apiFunction,
    });
    result = await apiFunctionApi({
      modelScanResultsMaskRequest: {
        mask_across_hosts_and_images: mask === 'maskHostAndImages',
        result_ids: [...nodeIds],
        scan_id: _scanId,
        scan_type: ScanTypeEnum.VulnerabilityScan,
      },
    });
    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        return {
          success: false,
          message: result.error.message ?? '',
        };
      } else if (result.error.response.status === 403) {
        if (actionType === ActionEnumType.MASK) {
          toast.error('You do not have enough permissions to mask');
          return {
            success: false,
            message: 'You do not have enough permissions to mask',
          };
        } else if (actionType === ActionEnumType.UNMASK) {
          toast.error('You do not have enough permissions to unmask');
          return {
            success: false,
            message: 'You do not have enough permissions to unmask',
          };
        }
      }
    }
  } else if (actionType === ActionEnumType.DELETE_SCAN) {
    const deleteScan = apiWrapper({
      fn: getScanResultsApiClient().deleteScanResultsForScanID,
    });

    const result = await deleteScan({
      scanId: formData.get('scanId') as string,
      scanType: ScanTypeEnum.VulnerabilityScan,
    });

    if (!result.ok) {
      if (result.error.response.status === 403) {
        return {
          success: false,
          message: 'You do not have enough permissions to delete scan',
        };
      }
      throw new Error('Error deleting scan');
    }
  }

  invalidateAllQueries();

  if (actionType === ActionEnumType.DELETE || actionType === ActionEnumType.DELETE_SCAN) {
    return {
      success: true,
    };
  } else if (actionType === ActionEnumType.NOTIFY) {
    toast.success('Notified successfully');
  } else if (actionType === ActionEnumType.MASK) {
    toast.success('Masked successfully');
  } else if (actionType === ActionEnumType.UNMASK) {
    toast.success('Unmasked successfully');
  }
  return null;
};

const ClockIcon = () => {
  return (
    <svg
      width="14"
      height="14"
      viewBox="0 0 14 14"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M7.00005 0.777832C3.56362 0.777832 0.777832 3.56362 0.777832 7.00005C0.777832 10.4365 3.56362 13.2223 7.00005 13.2223C10.4365 13.2223 13.2223 10.4365 13.2223 7.00005C13.2223 5.34982 12.5667 3.76717 11.3998 2.60028C10.2329 1.43339 8.65029 0.777832 7.00005 0.777832ZM5.13507 3.55839C3.88177 4.2375 3.10392 5.55126 3.11117 6.97672C3.11816 8.81914 4.41706 10.4038 6.22228 10.7723L6.11728 11.3673C4.33629 11.0215 2.93816 9.6383 2.57335 7.86112C2.20855 6.08394 2.94869 4.26178 4.44944 3.24238C5.9502 2.22297 7.91687 2.20649 9.4345 3.20061L9.10394 3.7295C7.91373 2.94504 6.38838 2.87928 5.13507 3.55839ZM7.35783 4.18061V7.15561L9.30617 8.48172C9.4302 8.55505 9.50353 8.69095 9.49671 8.83487C9.4899 8.9788 9.40407 9.10716 9.27366 9.16845C9.14325 9.22973 8.98965 9.21389 8.8745 9.12728L6.58005 7.57172V4.18061C6.58005 3.96583 6.75417 3.79172 6.96894 3.79172C7.18372 3.79172 7.35783 3.96583 7.35783 4.18061ZM1.55561 7.00005C1.55561 10.0069 3.99317 12.4445 7.00005 12.4445C8.44401 12.4445 9.82883 11.8709 10.8499 10.8499C11.8709 9.82883 12.4445 8.44401 12.4445 7.00005C12.4445 3.99317 10.0069 1.55561 7.00005 1.55561C3.99317 1.55561 1.55561 3.99317 1.55561 7.00005Z"
        fill="#B2C0C9"
      />
    </svg>
  );
};
const CaretDownIcon = () => {
  return (
    <svg
      width="12"
      height="12"
      viewBox="0 0 12 12"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M1.98746 4.62524L6.00212 8.7793L10.0168 4.62524C10.2439 4.38947 10.2369 4.01423 10.0011 3.78711C9.76532 3.56 9.39007 3.56702 9.16296 3.8028L6.00212 7.07516L2.83779 3.8028C2.61067 3.56702 2.23543 3.56 1.99966 3.78711C1.76388 4.01423 1.75686 4.38947 1.98398 4.62524H1.98746Z"
        fill="currentColor"
      />
    </svg>
  );
};
const DeleteConfirmationModal = ({
  showDialog,
  ids,
  setShowDialog,
}: {
  showDialog: boolean;
  ids: string[];
  setShowDialog: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const fetcher = useFetcher<ActionData>();

  const onDeleteAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      ids.forEach((item) => formData.append('nodeIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids, fetcher],
  );

  return (
    <Modal
      size="s"
      open={showDialog}
      onOpenChange={() => setShowDialog(false)}
      title={
        !fetcher.data?.success ? (
          <div className="flex gap-3 items-center dark:text-status-error">
            <span className="h-6 w-6 shrink-0">
              <ErrorStandardLineIcon />
            </span>
            Delete {ids.length > 1 ? 'vulnerabilities' : 'vulnerability'}
          </div>
        ) : undefined
      }
      footer={
        !fetcher.data?.success ? (
          <div className={'flex gap-x-4 justify-end'}>
            <Button
              size="sm"
              onClick={() => setShowDialog(false)}
              type="button"
              variant="outline"
            >
              Cancel
            </Button>
            <Button
              size="sm"
              color="error"
              onClick={(e) => {
                e.preventDefault();
                onDeleteAction(ActionEnumType.DELETE);
              }}
            >
              Yes, I&apos;m sure
            </Button>
          </div>
        ) : undefined
      }
    >
      {!fetcher.data?.success ? (
        <div className="grid">
          <span>The selected vulnerabilities will be deleted.</span>
          <br />
          <span>Are you sure you want to delete?</span>
          {fetcher.data?.message && <p className="">{fetcher.data?.message}</p>}
          <div className="flex items-center justify-right gap-4"></div>
        </div>
      ) : (
        <SuccessModalContent text="Deleted successfully!" />
      )}
    </Modal>
  );
};

const DeleteScanConfirmationModal = ({
  open,
  onOpenChange,
  scanId,
}: {
  scanId: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) => {
  const fetcher = useFetcher<ActionData>();
  const onDeleteScan = () => {
    const formData = new FormData();
    formData.append('actionType', ActionEnumType.DELETE_SCAN);
    formData.append('scanId', scanId);
    fetcher.submit(formData, {
      method: 'post',
    });
  };
  return (
    <Modal
      open={open}
      onOpenChange={onOpenChange}
      size="s"
      title={
        !fetcher.data?.success ? (
          <div className="flex gap-3 items-center dark:text-status-error">
            <span className="h-6 w-6 shrink-0">
              <ErrorStandardLineIcon />
            </span>
            Delete scan
          </div>
        ) : undefined
      }
      footer={
        !fetcher.data?.success ? (
          <div className={'flex gap-x-4 justify-end'}>
            <Button
              size="sm"
              onClick={() => onOpenChange(false)}
              type="button"
              variant="outline"
            >
              Cancel
            </Button>
            <Button
              size="sm"
              color="error"
              onClick={(e) => {
                e.preventDefault();
                onDeleteScan();
              }}
            >
              Yes, I&apos;m sure
            </Button>
          </div>
        ) : undefined
      }
    >
      {!fetcher.data?.success ? (
        <div className="grid">
          <span>
            Are you sure you want to delete this scan? This action cannot be undone.
          </span>
          {fetcher.data?.message && <p className="">{fetcher.data?.message}</p>}
          <div className="flex items-center justify-right gap-4"></div>
        </div>
      ) : (
        <SuccessModalContent text="Scan deleted successfully!" />
      )}
    </Modal>
  );
};

const HistoryDropdown = () => {
  const { data } = useScanResults();
  const { scanStatusResult } = data;
  const { updated_at } = scanStatusResult ?? {};

  if (!updated_at) {
    return null;
  }
  return (
    <div className="mx-4 flex items-center">
      <ClockIcon />
      <span className="pl-2 pr-3 text-t3 dark:text-text-text-and-icon uppercase">
        scan time
      </span>
      <div className="flex items-center">
        <Dropdown content={<></>}>
          <>
            <Button
              color="default"
              variant="flat"
              className="text-h5 dark:text-text-input-value"
            >
              {formatMilliseconds(updated_at)}
              <span className="pl-2 dark:text-accent-accent">
                <CaretDownIcon />
              </span>
            </Button>
          </>
        </Dropdown>
        <div className="h-3 w-[1px] dark:bg-bg-grid-border"></div>
      </div>
    </div>
  );
};
const History = () => {
  const { navigate } = usePageNavigation();

  const { data } = useScanResults();
  const { scanStatusResult } = data;
  const { scan_id, node_id, node_type } = scanStatusResult ?? {};

  const [scanIdToDelete, setScanIdToDelete] = useState<string | null>(null);
  const { downloadScan } = useDownloadScan();

  const { data: historyData } = useSuspenseQuery({
    ...queries.vulnerability.scanHistories({
      scanType: ScanTypeEnum.VulnerabilityScan,
      nodeId: node_id ?? '',
      nodeType: node_type ?? '',
    }),
  });

  if (!scan_id || !node_id || !node_type) {
    throw new Error('Scan Type, Node Type and Node Id are required');
  }
  return (
    <>
      <ScanHistoryList
        scans={[...(historyData?.data ?? [])].reverse().map((item) => ({
          id: item.scanId,
          isCurrent: item.scanId === scan_id,
          status: item.status,
          timestamp: formatMilliseconds(item.updatedAt),
          onDeleteClick: (id) => {
            setScanIdToDelete(id);
          },
          onDownloadClick: () => {
            downloadScan({
              scanId: item.scanId,
              scanType: UtilsReportFiltersScanTypeEnum.Vulnerability,
              nodeType: node_type as UtilsReportFiltersNodeTypeEnum,
            });
          },
          onScanClick: () => {
            navigate(
              generatePath('/vulnerability/scan-results/:scanId', {
                scanId: item.scanId,
              }),
              {
                replace: true,
              },
            );
          },
        }))}
      />
      {scanIdToDelete && (
        <DeleteScanConfirmationModal
          scanId={scanIdToDelete}
          open={!!scanIdToDelete}
          onOpenChange={(open) => {
            if (!open) setScanIdToDelete(null);
          }}
        />
      )}
    </>
  );
};

const ActionDropdown = ({
  ids,
  trigger,
  setIdsToDelete,
  setShowDeleteDialog,
  onTableAction,
}: {
  ids: string[];
  trigger: React.ReactNode;
  setIdsToDelete: React.Dispatch<React.SetStateAction<string[]>>;
  setShowDeleteDialog: React.Dispatch<React.SetStateAction<boolean>>;
  onTableAction: (ids: string[], actionType: string, maskHostAndImages?: string) => void;
}) => {
  return (
    <Dropdown
      triggerAsChild={true}
      align={'start'}
      content={
        <>
          <DropdownItem onClick={() => onTableAction(ids, ActionEnumType.MASK, '')}>
            Mask vulnerability
          </DropdownItem>
          <DropdownItem
            onClick={() => onTableAction(ids, ActionEnumType.MASK, 'maskHostAndImages')}
          >
            Mask vulnerability across hosts and images
          </DropdownItem>
          <DropdownSeparator />
          <DropdownItem onClick={() => onTableAction(ids, ActionEnumType.UNMASK, '')}>
            Un-mask vulnerability
          </DropdownItem>
          <DropdownItem
            onClick={() => onTableAction(ids, ActionEnumType.UNMASK, 'maskHostAndImages')}
          >
            Un-mask vulnerability across hosts and images
          </DropdownItem>
          <DropdownSeparator />
          <DropdownItem onClick={() => onTableAction(ids, ActionEnumType.NOTIFY)}>
            Notify
          </DropdownItem>
          <DropdownSeparator />
          <DropdownItem
            onClick={() => {
              setIdsToDelete(ids);
              setShowDeleteDialog(true);
            }}
          >
            Delete
          </DropdownItem>
        </>
      }
    >
      {trigger}
    </Dropdown>
  );
};

const BulkActions = ({
  ids,
  setIdsToDelete,
  setShowDeleteDialog,
  onTableAction,
}: {
  ids: string[];
  setIdsToDelete: React.Dispatch<React.SetStateAction<string[]>>;
  setShowDeleteDialog: React.Dispatch<React.SetStateAction<boolean>>;
  onTableAction: (ids: string[], actionType: string, maskHostAndImages?: string) => void;
}) => {
  return (
    <>
      <Dropdown
        triggerAsChild
        align={'start'}
        disabled={!ids.length}
        content={
          <>
            <DropdownItem onClick={() => onTableAction(ids, ActionEnumType.MASK, '')}>
              Mask vulnerabilities
            </DropdownItem>
            <DropdownItem
              onClick={() => onTableAction(ids, ActionEnumType.MASK, 'maskHostAndImages')}
            >
              Mask vulnerabilities across hosts and images
            </DropdownItem>
          </>
        }
      >
        <Button
          color="default"
          variant="flat"
          size="sm"
          startIcon={<EyeSolidIcon />}
          endIcon={<CaretDown />}
          disabled={!ids.length}
        >
          Mask
        </Button>
      </Dropdown>
      <Dropdown
        triggerAsChild
        align={'start'}
        disabled={!ids.length}
        content={
          <>
            <DropdownItem onClick={() => onTableAction(ids, ActionEnumType.UNMASK, '')}>
              Un-mask vulnerabilities
            </DropdownItem>
            <DropdownItem
              onClick={() =>
                onTableAction(ids, ActionEnumType.UNMASK, 'maskHostAndImages')
              }
            >
              Un-mask vulnerabilities across hosts and images
            </DropdownItem>
          </>
        }
      >
        <Button
          color="default"
          variant="flat"
          size="sm"
          startIcon={<EyeHideSolid />}
          endIcon={<CaretDown />}
          disabled={!ids.length}
        >
          Unmask
        </Button>
      </Dropdown>
      <Button
        color="default"
        variant="flat"
        size="sm"
        startIcon={<BellLineIcon />}
        disabled={!ids.length}
        onClick={() => {
          onTableAction(ids, ActionEnumType.NOTIFY);
        }}
      >
        Notify
      </Button>
      <Button
        color="error"
        variant="flat"
        size="sm"
        startIcon={<TrashLineIcon />}
        disabled={!ids.length}
        onClick={() => {
          setIdsToDelete(ids);
          setShowDeleteDialog(true);
        }}
      >
        Delete
      </Button>
    </>
  );
};

const FILTER_SEARCHPARAMS: Record<string, string> = {
  visibility: 'Masked/Unmasked',
  severity: 'CVE Severity',
};
const getAppliedFiltersCount = (searchParams: URLSearchParams) => {
  return Object.keys(FILTER_SEARCHPARAMS).reduce((prev, curr) => {
    return prev + searchParams.getAll(curr).length;
  }, 0);
};

const Filters = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [maskedQuery, setMaskedQuery] = useState('');
  const [severityQuery, setSeverityQuery] = useState('');
  const appliedFilterCount = getAppliedFiltersCount(searchParams);

  return (
    <div className="px-4 py-2.5 mb-4 border dark:border-bg-hover-3 rounded-[5px] overflow-hidden dark:bg-bg-left-nav">
      <div className="flex gap-2">
        <Combobox
          getDisplayValue={() => FILTER_SEARCHPARAMS['visibility']}
          multiple
          value={searchParams.getAll('visibility')}
          onChange={(values) => {
            setSearchParams((prev) => {
              prev.delete('visibility');
              values.forEach((value) => {
                prev.append('visibility', value);
              });
              prev.delete('page');
              return prev;
            });
          }}
          onQueryChange={(query) => {
            setMaskedQuery(query);
          }}
          clearAllElement="Clear"
          onClearAll={() => {
            setSearchParams((prev) => {
              prev.delete('visibility');
              prev.delete('page');
              return prev;
            });
          }}
        >
          {['masked', 'unmasked']
            .filter((item) => {
              if (!maskedQuery.length) return true;
              return item.includes(maskedQuery.toLowerCase());
            })
            .map((item) => {
              return (
                <ComboboxOption key={item} value={item}>
                  {capitalize(item)}
                </ComboboxOption>
              );
            })}
        </Combobox>
        <Combobox
          getDisplayValue={() => FILTER_SEARCHPARAMS['severity']}
          multiple
          value={searchParams.getAll('severity')}
          onChange={(values) => {
            setSearchParams((prev) => {
              prev.delete('severity');
              values.forEach((value) => {
                prev.append('severity', value);
              });
              prev.delete('page');
              return prev;
            });
          }}
          onQueryChange={(query) => {
            setSeverityQuery(query);
          }}
          clearAllElement="Clear"
          onClearAll={() => {
            setSearchParams((prev) => {
              prev.delete('severity');
              prev.delete('page');
              return prev;
            });
          }}
        >
          {['critical', 'high', 'medium', 'low', 'unknown']
            .filter((item) => {
              if (!severityQuery.length) return true;
              return item.includes(severityQuery.toLowerCase());
            })
            .map((item) => {
              return (
                <ComboboxOption key={item} value={item}>
                  {capitalize(item)}
                </ComboboxOption>
              );
            })}
        </Combobox>
      </div>
      {appliedFilterCount > 0 ? (
        <div className="flex gap-2.5 mt-4 flex-wrap items-center">
          {Array.from(searchParams)
            .filter(([key]) => {
              return Object.keys(FILTER_SEARCHPARAMS).includes(key);
            })
            .map(([key, value]) => {
              return (
                <FilterBadge
                  key={`${key}-${value}`}
                  onRemove={() => {
                    setSearchParams((prev) => {
                      const existingValues = prev.getAll(key);
                      prev.delete(key);
                      existingValues.forEach((existingValue) => {
                        if (existingValue !== value) prev.append(key, existingValue);
                      });
                      prev.delete('page');
                      return prev;
                    });
                  }}
                  text={`${FILTER_SEARCHPARAMS[key]}: ${value}`}
                />
              );
            })}
          <Button
            variant="flat"
            color="default"
            startIcon={<TimesIcon />}
            onClick={() => {
              setSearchParams((prev) => {
                Object.keys(FILTER_SEARCHPARAMS).forEach((key) => {
                  prev.delete(key);
                });
                prev.delete('page');
                return prev;
              });
            }}
            size="sm"
          >
            Clear all
          </Button>
        </div>
      ) : null}
    </div>
  );
};

const useScanResults = () => {
  const [searchParams] = useSearchParams();
  const params = useParams();
  const scanId = params?.scanId ?? '';
  return useSuspenseQuery({
    ...queries.vulnerability.scanResults({
      scanId,
      page: getPageFromSearchParams(searchParams),
      pageSize: parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE)),
      order: getOrderFromSearchParams(searchParams) || {
        sortBy: 'cve_severity',
        descending: true,
      },
      severity: searchParams.getAll('severity'),
      visibility: searchParams.getAll('visibility'),
    }),
    keepPreviousData: true,
  });
};

const CVETable = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const { data } = useScanResults();
  const columnHelper = createColumnHelper<ModelVulnerability>();
  const [rowSelectionState, setRowSelectionState] = useState<RowSelectionState>({});
  const [sort, setSort] = useSortingState();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [idsToDelete, setIdsToDelete] = useState<string[]>([]);
  const [filtersExpanded, setFiltersExpanded] = useState(false);
  const fetcher = useFetcher();

  const onTableAction = useCallback(
    (ids: string[], actionType: string, maskHostAndImages?: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);

      if (actionType === ActionEnumType.MASK || actionType === ActionEnumType.UNMASK) {
        formData.append('maskHostAndImages', maskHostAndImages ?? '');
      }

      ids.forEach((item) => formData.append('nodeIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [fetcher],
  );

  const columns = useMemo(() => {
    const columns = [
      getRowSelectionColumn(columnHelper, {
        size: 30,
        minSize: 30,
        maxSize: 50,
      }),
      columnHelper.display({
        id: 'actions',
        enableSorting: false,
        cell: (cell) => (
          <ActionDropdown
            ids={[cell.row.original.node_id]}
            setIdsToDelete={setIdsToDelete}
            setShowDeleteDialog={setShowDeleteDialog}
            onTableAction={onTableAction}
            trigger={
              <button className="p-1">
                <div className="h-[16px] w-[16px] dark:text-text-text-and-icon rotate-90">
                  <EllipsisIcon />
                </div>
              </button>
            }
          />
        ),
        header: () => '',
        size: 30,
        minSize: 30,
        maxSize: 50,
        enableResizing: false,
      }),
      columnHelper.accessor('cve_id', {
        cell: (info) => (
          <DFLink
            to={{
              pathname: `./${info.getValue()}`,
              search: searchParams.toString(),
            }}
            className="flex items-center gap-x-[6px]"
          >
            <div className="h-6 w-6 flex items-center justify-center bg-gray-100 shrink-0 dark:bg-[rgba(224,_81,_109,_0.2)] rounded-[5px]">
              <div className="w-3 h-3 dark:text-status-error">
                <VulnerabilityIcon />
              </div>
            </div>
            <div className="truncate">{info.getValue()}</div>
          </DFLink>
        ),
        header: () => 'CVE ID',
        minSize: 100,
        size: 120,
        maxSize: 250,
      }),
      columnHelper.accessor('cve_caused_by_package', {
        cell: (info) => info.getValue(),
        header: () => 'Package',
        minSize: 100,
        size: 200,
        maxSize: 250,
      }),
      columnHelper.accessor('cve_cvss_score', {
        cell: (info) => (
          <div>
            <CveCVSSScore score={info.getValue()} />
          </div>
        ),
        header: () => 'CVSS Score',
        minSize: 50,
        size: 60,
        maxSize: 60,
      }),
      columnHelper.accessor('cve_severity', {
        cell: (info) => (
          <div>
            <SeverityBadge severity={info.getValue()} />
          </div>
        ),
        header: () => 'Severity',
        minSize: 70,
        size: 80,
        maxSize: 90,
      }),
      columnHelper.accessor('cve_description', {
        enableSorting: false,
        cell: (info) => {
          return info.getValue() ?? 'No Description Available';
        },
        header: () => 'Description',
        minSize: 200,
        size: 250,
        maxSize: 400,
      }),
      columnHelper.accessor('cve_link', {
        enableSorting: false,
        cell: (info) => {
          if (!info.getValue().length) return '-';
          return (
            <DFLink to={info.getValue()} target="_blank" rel="noopener noreferrer">
              <div className="h-[16px] w-[16px]">
                <PopOutIcon />
              </div>
            </DFLink>
          );
        },
        header: () => 'Link',
        minSize: 40,
        size: 40,
        maxSize: 45,
        enableResizing: false,
      }),
    ];

    return columns;
  }, [setSearchParams]);

  const selectedIds = useMemo(() => {
    return Object.keys(rowSelectionState);
  }, [rowSelectionState]);

  useEffect(() => {
    if (idsToDelete.length) {
      setRowSelectionState({});
    }
  }, [data]);
  const { data: scanResultData, scanStatusResult } = data;

  if (scanStatusResult?.status === ScanStatusEnum.error) {
    return <ScanStatusInError errorMessage={scanStatusResult.status_message} />;
  } else if (
    scanStatusResult?.status !== ScanStatusEnum.error &&
    scanStatusResult?.status !== ScanStatusEnum.complete
  ) {
    return <ScanStatusInProgress LogoIcon={VulnerabilityIcon} />;
  }
  if (!scanResultData) {
    return null;
  }

  return (
    <div className="self-start">
      <div className="py-2 flex items-center">
        <BulkActions
          ids={selectedIds}
          onTableAction={onTableAction}
          setIdsToDelete={setIdsToDelete}
          setShowDeleteDialog={setShowDeleteDialog}
        />
        <div className="pr-2 ml-auto flex items-center gap-1">
          <Button
            className="pr-0"
            color="default"
            variant="flat"
            size="sm"
            startIcon={<FilterIcon />}
            onClick={() => {
              setFiltersExpanded((prev) => !prev);
            }}
          >
            Filter
          </Button>
          {getAppliedFiltersCount(searchParams) > 0 ? (
            <Badge
              label={String(getAppliedFiltersCount(searchParams))}
              variant="filled"
              size="small"
              color="blue"
            />
          ) : null}
        </div>
      </div>
      {filtersExpanded ? <Filters /> : null}
      <Table
        size="default"
        data={scanResultData.tableData}
        columns={columns}
        enableRowSelection
        rowSelectionState={rowSelectionState}
        onRowSelectionChange={setRowSelectionState}
        enablePagination
        manualPagination
        enableColumnResizing
        approximatePagination
        totalRows={scanResultData.pagination.totalRows}
        pageSize={parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE))}
        pageIndex={scanResultData.pagination.currentPage}
        getRowId={(row) => row.node_id}
        enableSorting
        manualSorting
        sortingState={sort}
        onSortingChange={(updaterOrValue) => {
          let newSortState: SortingState = [];
          if (typeof updaterOrValue === 'function') {
            newSortState = updaterOrValue(sort);
          } else {
            newSortState = updaterOrValue;
          }
          setSearchParams((prev) => {
            if (!newSortState.length) {
              prev.delete('sortby');
              prev.delete('desc');
            } else {
              prev.set('sortby', String(newSortState[0].id));
              prev.set('desc', String(newSortState[0].desc));
            }
            return prev;
          });
          setSort(newSortState);
        }}
        onPaginationChange={(updaterOrValue) => {
          let newPageIndex = 0;
          if (typeof updaterOrValue === 'function') {
            newPageIndex = updaterOrValue({
              pageIndex: scanResultData.pagination.currentPage,
              pageSize: parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE)),
            }).pageIndex;
          } else {
            newPageIndex = updaterOrValue.pageIndex;
          }
          setSearchParams((prev) => {
            prev.set('page', String(newPageIndex));
            return prev;
          });
        }}
        getTrProps={(row) => {
          if (row.original.masked) {
            return {
              className: 'opacity-40',
            };
          }
          return {};
        }}
        enablePageResize
        onPageResize={(newSize) => {
          setSearchParams((prev) => {
            prev.set('size', String(newSize));
            prev.delete('page');
            return prev;
          });
        }}
      />
      {showDeleteDialog && (
        <DeleteConfirmationModal
          showDialog={showDeleteDialog}
          ids={idsToDelete}
          setShowDialog={setShowDeleteDialog}
        />
      )}
    </div>
  );
};

const Header = () => {
  const { data } = useScanResults();
  const { scanStatusResult } = data;

  const { scan_id, node_type, updated_at, node_name } = scanStatusResult ?? {};

  if (!scan_id || !node_type || !updated_at) {
    throw new Error('Scan id, node type or updated_at is missing');
  }
  return (
    <div className="flex pl-6 pr-4 py-2 w-full items-center bg-white dark:bg-bg-breadcrumb-bar">
      <>
        <Breadcrumb>
          <BreadcrumbLink asChild icon={<VulnerabilityIcon />} isLink>
            <DFLink to={'/vulnerability'} unstyled>
              Vulnerabilities
            </DFLink>
          </BreadcrumbLink>
          <BreadcrumbLink isLink icon={<VulnerabilityIcon />} asChild>
            <DFLink to={`/vulnerability/scans?nodeType=${node_type}`} unstyled>
              {capitalize(node_type)}
            </DFLink>
          </BreadcrumbLink>
          <BreadcrumbLink icon={<VulnerabilityIcon />}>
            <span className="inherit cursor-auto">{node_name}</span>
          </BreadcrumbLink>
        </Breadcrumb>
        <div className="ml-auto">
          <div className="dark:text-text-text-and-icon text-p7">
            Scanned at{' '}
            <span className="dark:text-white text-p6">
              {formatMilliseconds(updated_at)}
            </span>
          </div>
        </div>
      </>
    </div>
  );
};

const SeverityCountWidget = () => {
  const {
    data: { data },
  } = useScanResults();
  const severityCounts: {
    [k: string]: number;
  } = data?.severityCounts ?? {};
  return (
    <div className="pt-3 flex gap-14 items-center">
      <div className="h-[140px] w-[140px]">
        <VulnerabilityScanResultsPieChart data={severityCounts} />
      </div>
      <div className="flex flex-col flex-1 max-w-[130px] gap-1">
        {Object.keys(severityCounts)?.map((key) => {
          return (
            <div className="flex gap-2 w-full py-[3px] items-center" key={key}>
              <div
                className="h-3 w-3 rounded-full"
                style={{
                  backgroundColor:
                    SEVERITY_COLORS[key.toLowerCase() as VulnerabilitySeverityType],
                }}
              ></div>
              <div className="capitalize text-p7 dark:text-text-text-and-icon">{key}</div>
              <div className="ml-auto text-p7 dark:text-text-input-value">
                {abbreviateNumber(severityCounts?.[key] ?? 0)}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

const Widgets = () => {
  return (
    <Card className="px-[32px] py-[16px] flex gap-[36px]">
      <div className="flex-1">
        <div className="text-h6 dark:text-text-input-value">Total vulnerabilities</div>
        <Suspense
          fallback={
            <div className="flex items-center justify-center min-h-[100px]">
              <CircleSpinner size="md" />
            </div>
          }
        >
          <SeverityCountWidget />
        </Suspense>
      </div>
      <div className="h-[120px] w-[1px] dark:bg-bg-grid-border self-center" />
      <div className="flex-1">
        <div className="text-h6 dark:text-text-input-value">Top 5 vulnerabilities</div>
        <div className="flex flex-col gap-1 pt-3">
          {[
            {
              cveId: 'CVE-2018-1000122',
              severity: 'critical',
              cveCVSSScore: 9,
            },
            {
              cveId: 'CVE-2018-1000123',
              severity: 'critical',
              cveCVSSScore: 1,
            },
            {
              cveId: 'CVE-2018-1000124',
              severity: 'critical',
              cveCVSSScore: 4,
            },
            {
              cveId: 'CVE-2018-1000125',
              severity: 'critical',
              cveCVSSScore: 7,
            },
            {
              cveId: 'CVE-2018-1000126',
              severity: 'critical',
              cveCVSSScore: 9,
            },
          ].map((item) => {
            return (
              <div
                className="flex items-center justify-between max-w-[400px]"
                key={item.cveId}
              >
                <div className="flex items-center gap-3">
                  <div className="w-[14px] h-[14px] dark:text-df-gray-500">
                    <VulnerabilityIcon />
                  </div>
                  <div className="dark:text-text-text-and-icon text-p7 truncate">
                    {item.cveId}
                  </div>
                </div>
                <div>
                  <CveCVSSScore score={item.cveCVSSScore} />
                </div>
                <div>
                  <SeverityBadge severity={item.severity} />
                </div>
              </div>
            );
          })}
        </div>
      </div>
      <div className="h-[120px] w-[1px] dark:bg-bg-grid-border self-center" />
      <div className="flex-1">
        <div className="text-h6 dark:text-text-input-value">Scan history</div>
        <div className="pt-3">
          <Suspense fallback={<CircleSpinner size="lg" />}>
            <History />
          </Suspense>
        </div>
      </div>
    </Card>
  );
};

const VulnerabilityScanResults = () => {
  return (
    <>
      <Suspense
        fallback={
          <HeaderSkeleton
            RightSkeleton={
              <>
                <TimestampSkeleton />
                <SquareSkeleton />
                <SquareSkeleton />
              </>
            }
            LeftSkeleton={
              <>
                <RectSkeleton width="w-40" height="h-4" />
                <RectSkeleton width="w-40" height="h-4" />
                <RectSkeleton width="w-40" height="h-4" />
              </>
            }
          />
        }
      >
        <Header />
      </Suspense>
      <div className="py-3">
        <HistoryDropdown />
      </div>
      <div className="p-[16px]">
        <Widgets />
      </div>

      <div className="px-[16px] pb-4">
        <Suspense fallback={<TableSkeleton columns={7} rows={15} size={'default'} />}>
          <CVETable />
        </Suspense>
      </div>
      <Outlet />
    </>
  );
};

export const module = {
  action,
  element: <VulnerabilityScanResults />,
};

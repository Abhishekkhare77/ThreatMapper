import { useSuspenseQuery } from '@suspensive/react-query';
import { useQuery } from '@tanstack/react-query';
import cx from 'classnames';
import { capitalize } from 'lodash-es';
import { Suspense, useCallback, useEffect, useMemo, useState } from 'react';
import { FaHistory } from 'react-icons/fa';
import {
  HiOutlineDownload,
  HiOutlineExclamationCircle,
  HiOutlineTrash,
} from 'react-icons/hi';
import { IconContext } from 'react-icons/lib';
import {
  ActionFunctionArgs,
  generatePath,
  Outlet,
  useFetcher,
  useParams,
  useSearchParams,
} from 'react-router-dom';
import { toast } from 'sonner';
import { twMerge } from 'tailwind-merge';
import {
  Breadcrumb,
  BreadcrumbLink,
  Button,
  Card,
  CircleSpinner,
  createColumnHelper,
  Dropdown,
  DropdownItem,
  DropdownSeparator,
  getRowSelectionColumn,
  IconButton,
  Modal,
  Popover,
  RowSelectionState,
  SortingState,
  Table,
  TableSkeleton,
} from 'ui-components';

import { getScanResultsApiClient } from '@/api/api';
import {
  ModelScanInfo,
  ModelVulnerability,
  UtilsReportFiltersNodeTypeEnum,
  UtilsReportFiltersScanTypeEnum,
} from '@/api/generated';
import { DFLink } from '@/components/DFLink';
import {
  HeaderSkeleton,
  RectSkeleton,
  SquareSkeleton,
  TimestampSkeleton,
} from '@/components/header/HeaderSkeleton';
import { EllipsisIcon } from '@/components/icons/common/Ellipsis';
import { PopOut } from '@/components/icons/common/PopOut';
import { ScanStatusBadge } from '@/components/ScanStatusBadge';
import {
  NoIssueFound,
  ScanStatusInError,
  ScanStatusInProgress,
} from '@/components/ScanStatusMessage';
import { CveCVSSScore, SeverityBadge } from '@/components/SeverityBadge';
import { VulnerabilityIcon } from '@/components/sideNavigation/icons/Vulnerability';
import { SEVERITY_COLORS } from '@/constants/charts';
import { useDownloadScan } from '@/features/common/data-component/downloadScanAction';
import { SuccessModalContent } from '@/features/settings/components/SuccessModalContent';
import { VulnerabilityScanResultsPieChart } from '@/features/vulnerabilities/components/ScanResults/VulnerabilityScanResultsPieChart';
import { invalidateAllQueries, queries } from '@/queries';
import { ScanStatusEnum, ScanTypeEnum, VulnerabilitySeverityType } from '@/types/common';
import { apiWrapper } from '@/utils/api';
import { formatMilliseconds } from '@/utils/date';
import { abbreviateNumber } from '@/utils/number';
import { isScanComplete, isScanFailed } from '@/utils/scan';
import {
  getOrderFromSearchParams,
  getPageFromSearchParams,
  useSortingState,
} from '@/utils/table';
import { usePageNavigation } from '@/utils/usePageNavigation';

export interface FocusableElement {
  focus(options?: FocusOptions): void;
}
enum ActionEnumType {
  MASK = 'mask',
  UNMASK = 'unmask',
  DELETE = 'delete',
  NOTIFY = 'notify',
  DELETE_SCAN = 'delete_scan',
}

type ScanResult = {
  totalSeverity: number;
  severityCounts: { [key: string]: number };
  timestamp: number;
  tableData: ModelVulnerability[];
  pagination: {
    currentPage: number;
    totalRows: number;
  };
};

export type LoaderDataType = {
  error?: string;
  scanStatusResult?: ModelScanInfo;
  message?: string;
  data?: ScanResult;
};

const DEFAULT_PAGE_SIZE = 10;

type ActionFunctionType =
  | ReturnType<typeof getScanResultsApiClient>['deleteScanResult']
  | ReturnType<typeof getScanResultsApiClient>['maskScanResult']
  | ReturnType<typeof getScanResultsApiClient>['notifyScanResult']
  | ReturnType<typeof getScanResultsApiClient>['unmaskScanResult'];

type ActionData = {
  success: boolean;
  message?: string;
} | null;

const action = async ({
  params: { scanId = '' },
  request,
}: ActionFunctionArgs): Promise<ActionData> => {
  const formData = await request.formData();
  const nodeIds = (formData.getAll('nodeIds[]') ?? []) as string[];
  const actionType = formData.get('actionType');
  const _scanId = scanId;
  const mask = formData.get('maskHostAndImages');
  if (!_scanId) {
    throw new Error('Scan ID is required');
  }
  if (!actionType) {
    return null;
  }

  let result = null;
  let apiFunction: ActionFunctionType | null = null;
  if (actionType === ActionEnumType.DELETE || actionType === ActionEnumType.NOTIFY) {
    apiFunction =
      actionType === ActionEnumType.DELETE
        ? getScanResultsApiClient().deleteScanResult
        : getScanResultsApiClient().notifyScanResult;

    const apiFunctionApi = apiWrapper({
      fn: apiFunction,
    });
    result = await apiFunctionApi({
      modelScanResultsActionRequest: {
        result_ids: [...nodeIds],
        scan_id: _scanId,
        scan_type: ScanTypeEnum.VulnerabilityScan,
      },
    });

    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        return {
          success: false,
          message: result.error.message ?? '',
        };
      } else if (result.error.response.status === 403) {
        if (actionType === ActionEnumType.DELETE) {
          return {
            success: false,
            message: 'You do not have enough permissions to delete vulnerability',
          };
        } else if (actionType === ActionEnumType.NOTIFY) {
          return {
            success: false,
            message: 'You do not have enough permissions to notify',
          };
        }
      }
    }
  } else if (actionType === ActionEnumType.MASK || actionType === ActionEnumType.UNMASK) {
    apiFunction =
      actionType === ActionEnumType.MASK
        ? getScanResultsApiClient().maskScanResult
        : getScanResultsApiClient().unmaskScanResult;
    const apiFunctionApi = apiWrapper({
      fn: apiFunction,
    });
    result = await apiFunctionApi({
      modelScanResultsMaskRequest: {
        mask_across_hosts_and_images: mask === 'maskHostAndImages',
        result_ids: [...nodeIds],
        scan_id: _scanId,
        scan_type: ScanTypeEnum.VulnerabilityScan,
      },
    });
    if (!result.ok) {
      if (result.error.response.status === 400 || result.error.response.status === 409) {
        return {
          success: false,
          message: result.error.message ?? '',
        };
      } else if (result.error.response.status === 403) {
        if (actionType === ActionEnumType.MASK) {
          toast.error('You do not have enough permissions to mask');
          return {
            success: false,
            message: 'You do not have enough permissions to mask',
          };
        } else if (actionType === ActionEnumType.UNMASK) {
          toast.error('You do not have enough permissions to unmask');
          return {
            success: false,
            message: 'You do not have enough permissions to unmask',
          };
        }
      }
    }
  } else if (actionType === ActionEnumType.DELETE_SCAN) {
    const deleteScan = apiWrapper({
      fn: getScanResultsApiClient().deleteScanResultsForScanID,
    });

    const result = await deleteScan({
      scanId: formData.get('scanId') as string,
      scanType: ScanTypeEnum.VulnerabilityScan,
    });

    if (!result.ok) {
      if (result.error.response.status === 403) {
        return {
          success: false,
          message: 'You do not have enough permissions to delete scan',
        };
      }
      throw new Error('Error deleting scan');
    }
  }

  invalidateAllQueries();

  if (actionType === ActionEnumType.DELETE || actionType === ActionEnumType.DELETE_SCAN) {
    return {
      success: true,
    };
  } else if (actionType === ActionEnumType.NOTIFY) {
    toast.success('Notified successfully');
  } else if (actionType === ActionEnumType.MASK) {
    toast.success('Masked successfully');
  } else if (actionType === ActionEnumType.UNMASK) {
    toast.success('Unmasked successfully');
  }
  return null;
};

const DeleteConfirmationModal = ({
  showDialog,
  ids,
  setShowDialog,
}: {
  showDialog: boolean;
  ids: string[];
  setShowDialog: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const fetcher = useFetcher<ActionData>();

  const onDeleteAction = useCallback(
    (actionType: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);
      ids.forEach((item) => formData.append('nodeIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids, fetcher],
  );

  return (
    <Modal open={showDialog} onOpenChange={() => setShowDialog(false)}>
      {!fetcher.data?.success ? (
        <div className="grid place-items-center p-6">
          <IconContext.Provider
            value={{
              className: 'mb-3 dark:text-red-600 text-red-400 w-[70px] h-[70px]',
            }}
          >
            <HiOutlineExclamationCircle />
          </IconContext.Provider>
          <h3 className="mb-4 font-normal text-center text-sm">
            The selected vulnerabilities will be deleted.
            <br />
            <span>Are you sure you want to delete?</span>
          </h3>
          {fetcher.data?.message && (
            <p className="text-sm text-red-500 pb-3">{fetcher.data?.message}</p>
          )}
          <div className="flex items-center justify-right gap-4">
            <Button size="xs" onClick={() => setShowDialog(false)} type="button" outline>
              No, Cancel
            </Button>
            <Button
              size="xs"
              color="danger"
              onClick={(e) => {
                e.preventDefault();
                onDeleteAction(ActionEnumType.DELETE);
              }}
            >
              Yes, I&apos;m sure
            </Button>
          </div>
        </div>
      ) : (
        <SuccessModalContent text="Deleted successfully!" />
      )}
    </Modal>
  );
};

const DeleteScanConfirmationModal = ({
  open,
  onOpenChange,
  scanId,
}: {
  scanId: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}) => {
  const fetcher = useFetcher<ActionData>();
  const onDeleteScan = () => {
    const formData = new FormData();
    formData.append('actionType', ActionEnumType.DELETE_SCAN);
    formData.append('scanId', scanId);
    fetcher.submit(formData, {
      method: 'post',
    });
  };
  return (
    <Modal open={open} onOpenChange={onOpenChange}>
      {!fetcher.data?.success ? (
        <div className="grid place-items-center p-6">
          <IconContext.Provider
            value={{
              className: 'mb-3 dark:text-red-600 text-red-400 w-[70px] h-[70px]',
            }}
          >
            <HiOutlineExclamationCircle />
          </IconContext.Provider>
          <h3 className="mb-4 font-normal text-center text-sm">
            <span>Are you sure you want to delete the scan?</span>
          </h3>
          {fetcher.data?.message && (
            <p className="text-sm text-red-500 pb-3">{fetcher.data?.message}</p>
          )}
          <div className="flex items-center justify-right gap-4">
            <Button size="xs" onClick={() => onOpenChange(false)} type="button" outline>
              No, Cancel
            </Button>
            <Button
              loading={fetcher.state === 'loading'}
              disabled={fetcher.state === 'loading'}
              size="xs"
              color="danger"
              onClick={(e) => {
                e.preventDefault();
                onDeleteScan();
              }}
            >
              Yes, I&apos;m sure
            </Button>
          </div>
        </div>
      ) : (
        <SuccessModalContent text="Scan deleted successfully!" />
      )}
    </Modal>
  );
};

const HistoryDropdown = ({ nodeType }: { nodeType: string }) => {
  const { navigate } = usePageNavigation();

  const [searchParams] = useSearchParams();
  const params = useParams();
  const scanId = params?.scanId ?? '';
  const { data } = useSuspenseQuery({
    ...queries.vulnerability.scanResults({
      scanId,
      page: getPageFromSearchParams(searchParams),
      pageSize: DEFAULT_PAGE_SIZE,
      order: getOrderFromSearchParams(searchParams) || {
        sortBy: 'cve_severity',
        descending: true,
      },
      severity: searchParams.getAll('severity'),
      masks: searchParams.getAll('mask'),
      unmasks: searchParams.getAll('unmask'),
    }),
    keepPreviousData: true,
  });
  const { scanStatusResult } = data;
  const { scan_id, node_id, node_type } = scanStatusResult ?? {};

  const [popoverOpen, setPopoverOpen] = useState(false);
  const [scanIdToDelete, setScanIdToDelete] = useState<string | null>(null);
  const { downloadScan } = useDownloadScan();

  const {
    data: historyData,
    isFetching,
    refetch,
  } = useQuery({
    ...queries.vulnerability.scanHistories({
      scanType: ScanTypeEnum.VulnerabilityScan,
      nodeId: node_id ?? '',
      nodeType: nodeType ?? '',
    }),
    enabled: false,
  });

  const onHistoryClick = () => {
    refetch();
  };

  if (!scan_id || !node_id || !node_type) {
    throw new Error('Scan Type, Node Type and Node Id are required');
  }
  return (
    <>
      <Suspense
        fallback={
          <Button
            size="xs"
            color="primary"
            outline
            className="rounded-lg bg-transparent"
            startIcon={<FaHistory />}
            type="button"
            loading
          >
            Scan History
          </Button>
        }
      >
        <Popover
          open={popoverOpen}
          triggerAsChild
          onOpenChange={(open) => {
            if (open) onHistoryClick();
            setPopoverOpen(open);
          }}
          content={
            <div className="p-4 max-h-80 overflow-y-auto flex flex-col gap-2">
              {[...(historyData?.data ?? [])].reverse().map((item) => {
                const isCurrentScan = item.scanId === scan_id;
                return (
                  <div key={item.scanId} className="flex gap-2 justify-between">
                    <button
                      className="flex gap-2 justify-between flex-grow"
                      onClick={() => {
                        navigate(
                          generatePath('/vulnerability/scan-results/:scanId', {
                            scanId: item.scanId,
                          }),
                          {
                            replace: true,
                          },
                        );
                        setPopoverOpen(false);
                      }}
                    >
                      <span
                        className={twMerge(
                          cx(
                            'flex items-center text-gray-700 dark:text-gray-400 gap-x-4',
                            {
                              'text-blue-600 dark:text-blue-500': isCurrentScan,
                            },
                          ),
                        )}
                      >
                        {formatMilliseconds(item.updatedAt)}
                      </span>
                      <ScanStatusBadge status={item.status} />
                    </button>
                    <div className="flex gap-1">
                      <IconButton
                        color="primary"
                        outline
                        size="xxs"
                        disabled={!isScanComplete(item.status)}
                        className="rounded-lg bg-transparent"
                        icon={<HiOutlineDownload />}
                        onClick={(e) => {
                          e.preventDefault();
                          downloadScan({
                            scanId: item.scanId,
                            scanType: UtilsReportFiltersScanTypeEnum.Vulnerability,
                            nodeType: nodeType as UtilsReportFiltersNodeTypeEnum,
                          });
                        }}
                      />
                      <IconButton
                        color="danger"
                        outline
                        size="xxs"
                        disabled={
                          isCurrentScan ||
                          (!isScanComplete(item.status) && !isScanFailed(item.status))
                        }
                        className="rounded-lg bg-transparent"
                        icon={<HiOutlineTrash />}
                        onClick={(e) => {
                          e.preventDefault();
                          setScanIdToDelete(item.scanId);
                        }}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          }
        >
          <Button
            size="xs"
            color="primary"
            outline
            startIcon={<FaHistory />}
            type="button"
            loading={isFetching}
          >
            Scan History
          </Button>
        </Popover>
      </Suspense>
      {scanIdToDelete && (
        <DeleteScanConfirmationModal
          scanId={scanIdToDelete}
          open={!!scanIdToDelete}
          onOpenChange={(open) => {
            if (!open) setScanIdToDelete(null);
          }}
        />
      )}
    </>
  );
};

const ActionDropdown = ({
  ids,
  trigger,
  setIdsToDelete,
  setShowDeleteDialog,
}: {
  ids: string[];
  trigger: React.ReactNode;
  setIdsToDelete: React.Dispatch<React.SetStateAction<string[]>>;
  setShowDeleteDialog: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const fetcher = useFetcher();

  const onTableAction = useCallback(
    (actionType: string, maskHostAndImages?: string) => {
      const formData = new FormData();
      formData.append('actionType', actionType);

      if (actionType === ActionEnumType.MASK || actionType === ActionEnumType.UNMASK) {
        formData.append('maskHostAndImages', maskHostAndImages ?? '');
      }

      ids.forEach((item) => formData.append('nodeIds[]', item));
      fetcher.submit(formData, {
        method: 'post',
      });
    },
    [ids],
  );

  return (
    <Dropdown
      triggerAsChild={true}
      align={'start'}
      content={
        <>
          <DropdownItem onClick={() => onTableAction(ActionEnumType.MASK, '')}>
            Mask vulnerability
          </DropdownItem>
          <DropdownItem
            onClick={() => onTableAction(ActionEnumType.MASK, 'maskHostAndImages')}
          >
            Mask vulnerability across hosts and images
          </DropdownItem>
          <DropdownSeparator />
          <DropdownItem onClick={() => onTableAction(ActionEnumType.UNMASK, '')}>
            Un-mask vulnerability
          </DropdownItem>
          <DropdownItem
            onClick={() => onTableAction(ActionEnumType.UNMASK, 'maskHostAndImages')}
          >
            Un-mask vulnerability across hosts and images
          </DropdownItem>
          <DropdownSeparator />
          <DropdownItem onClick={() => onTableAction(ActionEnumType.NOTIFY)}>
            Notify
          </DropdownItem>
          <DropdownSeparator />
          <DropdownItem
            onClick={() => {
              setIdsToDelete(ids);
              setShowDeleteDialog(true);
            }}
          >
            Delete
          </DropdownItem>
        </>
      }
    >
      {trigger}
    </Dropdown>
  );
};
const CVETable = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const params = useParams();
  const scanId = params?.scanId ?? '';
  const { data } = useSuspenseQuery({
    ...queries.vulnerability.scanResults({
      scanId,
      page: getPageFromSearchParams(searchParams),
      pageSize: parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE)),
      order: getOrderFromSearchParams(searchParams) || {
        sortBy: 'cve_severity',
        descending: true,
      },
      severity: searchParams.getAll('severity'),
      masks: searchParams.getAll('mask'),
      unmasks: searchParams.getAll('unmask'),
    }),
    keepPreviousData: true,
  });
  const columnHelper = createColumnHelper<ModelVulnerability>();
  const [rowSelectionState, setRowSelectionState] = useState<RowSelectionState>({});
  const [sort, setSort] = useSortingState();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [idsToDelete, setIdsToDelete] = useState<string[]>([]);

  const columns = useMemo(() => {
    const columns = [
      getRowSelectionColumn(columnHelper, {
        size: 30,
        minSize: 30,
        maxSize: 50,
      }),
      columnHelper.display({
        id: 'actions',
        enableSorting: false,
        cell: (cell) => (
          <ActionDropdown
            ids={[cell.row.original.node_id]}
            setIdsToDelete={setIdsToDelete}
            setShowDeleteDialog={setShowDeleteDialog}
            trigger={
              <button className="p-1">
                <div className="h-[16px] w-[16px] dark:text-text-text-and-icon rotate-90">
                  <EllipsisIcon />
                </div>
              </button>
            }
          />
        ),
        header: () => '',
        size: 30,
        minSize: 30,
        maxSize: 50,
        enableResizing: false,
      }),
      columnHelper.accessor('cve_id', {
        cell: (info) => (
          <DFLink
            to={{
              pathname: `./${info.getValue()}`,
              search: searchParams.toString(),
            }}
            className="flex items-center gap-x-[6px]"
          >
            <div className="h-6 w-6 flex items-center justify-center bg-gray-100 shrink-0 dark:bg-[rgba(224,_81,_109,_0.2)] rounded-[5px]">
              <div className="w-3 h-3 dark:text-status-error">
                <VulnerabilityIcon />
              </div>
            </div>
            <div className="truncate">{info.getValue()}</div>
          </DFLink>
        ),
        header: () => 'CVE ID',
        minSize: 100,
        size: 120,
        maxSize: 250,
      }),
      columnHelper.accessor('cve_caused_by_package', {
        cell: (info) => info.getValue(),
        header: () => 'Package',
        minSize: 100,
        size: 200,
        maxSize: 250,
      }),
      columnHelper.accessor('cve_cvss_score', {
        cell: (info) => (
          <div>
            <CveCVSSScore score={info.getValue()} />
          </div>
        ),
        header: () => 'CVSS Score',
        minSize: 50,
        size: 60,
        maxSize: 60,
      }),
      columnHelper.accessor('cve_severity', {
        cell: (info) => (
          <div>
            <SeverityBadge severity={info.getValue()} />
          </div>
        ),
        header: () => 'Severity',
        minSize: 70,
        size: 80,
        maxSize: 90,
      }),
      columnHelper.accessor('cve_description', {
        enableSorting: false,
        cell: (info) => {
          return info.getValue() ?? 'No Description Available';
        },
        header: () => 'Description',
        minSize: 200,
        size: 250,
        maxSize: 400,
      }),
      columnHelper.accessor('cve_link', {
        enableSorting: false,
        cell: (info) => {
          if (!info.getValue().length) return '-';
          return (
            <DFLink to={info.getValue()} target="_blank" rel="noopener noreferrer">
              <div className="h-[16px] w-[16px]">
                <PopOut />
              </div>
            </DFLink>
          );
        },
        header: () => 'Link',
        minSize: 40,
        size: 40,
        maxSize: 45,
        enableResizing: false,
      }),
    ];

    return columns;
  }, [setSearchParams]);

  const selectedIds = useMemo(() => {
    return Object.keys(rowSelectionState);
  }, [rowSelectionState]);

  useEffect(() => {
    if (idsToDelete.length) {
      setRowSelectionState({});
    }
  }, [data]);
  const { data: scanResultData, scanStatusResult } = data;

  if (scanStatusResult?.status === ScanStatusEnum.error) {
    return <ScanStatusInError errorMessage={scanStatusResult.status_message} />;
  } else if (
    scanStatusResult?.status !== ScanStatusEnum.error &&
    scanStatusResult?.status !== ScanStatusEnum.complete
  ) {
    return <ScanStatusInProgress LogoIcon={VulnerabilityIcon} />;
  } else if (
    scanStatusResult?.status === ScanStatusEnum.complete &&
    scanResultData &&
    scanResultData.pagination.currentPage === 0 &&
    scanResultData.tableData.length === 0
  ) {
    return (
      <NoIssueFound
        LogoIcon={VulnerabilityIcon}
        scanType={ScanTypeEnum.VulnerabilityScan}
      />
    );
  }
  if (!scanResultData) {
    return null;
  }

  return (
    <div className="self-start">
      <Table
        size="default"
        data={scanResultData.tableData}
        columns={columns}
        enableRowSelection
        rowSelectionState={rowSelectionState}
        onRowSelectionChange={setRowSelectionState}
        enablePagination
        manualPagination
        enableColumnResizing
        approximatePagination
        totalRows={scanResultData.pagination.totalRows}
        pageSize={parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE))}
        pageIndex={scanResultData.pagination.currentPage}
        getRowId={(row) => row.node_id}
        enableSorting
        manualSorting
        sortingState={sort}
        onSortingChange={(updaterOrValue) => {
          let newSortState: SortingState = [];
          if (typeof updaterOrValue === 'function') {
            newSortState = updaterOrValue(sort);
          } else {
            newSortState = updaterOrValue;
          }
          setSearchParams((prev) => {
            if (!newSortState.length) {
              prev.delete('sortby');
              prev.delete('desc');
            } else {
              prev.set('sortby', String(newSortState[0].id));
              prev.set('desc', String(newSortState[0].desc));
            }
            return prev;
          });
          setSort(newSortState);
        }}
        onPaginationChange={(updaterOrValue) => {
          let newPageIndex = 0;
          if (typeof updaterOrValue === 'function') {
            newPageIndex = updaterOrValue({
              pageIndex: scanResultData.pagination.currentPage,
              pageSize: parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE)),
            }).pageIndex;
          } else {
            newPageIndex = updaterOrValue.pageIndex;
          }
          setSearchParams((prev) => {
            prev.set('page', String(newPageIndex));
            return prev;
          });
        }}
        getTrProps={(row) => {
          if (row.original.masked) {
            return {
              className: 'opacity-40',
            };
          }
          return {};
        }}
        enablePageResize
        onPageResize={(newSize) => {
          setSearchParams((prev) => {
            prev.set('size', String(newSize));
            return prev;
          });
        }}
      />
      {showDeleteDialog && (
        <DeleteConfirmationModal
          showDialog={showDeleteDialog}
          ids={idsToDelete}
          setShowDialog={setShowDeleteDialog}
        />
      )}
    </div>
  );
};

// const isFilterApplied =
//     searchParams.has('severity') ||
//     searchParams.has('mask') ||
//     searchParams.has('unmask');
//   const onResetFilters = () => {
//     setSearchParams(() => {
//       return {};
//     });
//   };

const HeaderComponent = () => {
  const [searchParams] = useSearchParams();
  const params = useParams();
  const scanId = params?.scanId ?? '';
  const { data } = useSuspenseQuery({
    ...queries.vulnerability.scanResults({
      scanId,
      page: getPageFromSearchParams(searchParams),
      pageSize: parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE)),
      order: getOrderFromSearchParams(searchParams) || {
        sortBy: 'cve_severity',
        descending: true,
      },
      severity: searchParams.getAll('severity'),
      masks: searchParams.getAll('mask'),
      unmasks: searchParams.getAll('unmask'),
    }),
    keepPreviousData: true,
  });
  const { scanStatusResult } = data;

  const { scan_id, node_type, updated_at, node_name } = scanStatusResult ?? {};

  if (!scan_id || !node_type || !updated_at) {
    throw new Error('Scan id, node type or updated_at is missing');
  }
  return (
    <div className="flex pl-6 pr-4 py-2 w-full items-center bg-white dark:bg-bg-breadcrumb-bar">
      <>
        <Breadcrumb>
          <BreadcrumbLink asChild icon={<VulnerabilityIcon />} isLink>
            <DFLink to={'/vulnerability'} unstyled>
              Vulnerabilities
            </DFLink>
          </BreadcrumbLink>
          <BreadcrumbLink isLink icon={<VulnerabilityIcon />} asChild>
            <DFLink to={`/vulnerability/scans?nodeType=${node_type}`} unstyled>
              {capitalize(node_type)}
            </DFLink>
          </BreadcrumbLink>
          <BreadcrumbLink icon={<VulnerabilityIcon />}>
            <span className="inherit cursor-auto">{node_name}</span>
          </BreadcrumbLink>
        </Breadcrumb>
        <div className="ml-auto">
          <div className="dark:text-text-text-and-icon text-p7">
            Scanned at{' '}
            <span className="dark:text-white text-p6">
              {formatMilliseconds(updated_at)}
            </span>
          </div>
        </div>
      </>
    </div>
  );
};

const SeverityCountWidget = () => {
  const params = useParams();
  const scanId = params?.scanId ?? '';
  const [searchParams] = useSearchParams();
  const {
    data: { data },
  } = useSuspenseQuery({
    ...queries.vulnerability.scanResults({
      scanId,
      page: getPageFromSearchParams(searchParams),
      pageSize: parseInt(searchParams.get('size') ?? String(DEFAULT_PAGE_SIZE)),
      order: getOrderFromSearchParams(searchParams) || {
        sortBy: 'cve_severity',
        descending: true,
      },
      severity: searchParams.getAll('severity'),
      masks: searchParams.getAll('mask'),
      unmasks: searchParams.getAll('unmask'),
    }),
    keepPreviousData: true,
  });
  const severityCounts: {
    [k: string]: number;
  } = data?.severityCounts ?? {};
  return (
    <div className="pt-3 flex gap-14 items-center">
      <div className="h-[140px] w-[140px]">
        <VulnerabilityScanResultsPieChart data={severityCounts} />
      </div>
      <div className="flex flex-col flex-1 max-w-[130px] gap-1">
        {Object.keys(severityCounts)?.map((key) => {
          return (
            <div className="flex gap-2 w-full py-[3px] items-center" key={key}>
              <div
                className="h-3 w-3 rounded-full"
                style={{
                  backgroundColor:
                    SEVERITY_COLORS[key.toLowerCase() as VulnerabilitySeverityType],
                }}
              ></div>
              <div className="capitalize text-p7 dark:text-text-text-and-icon">{key}</div>
              <div className="ml-auto text-p7 dark:text-text-input-value">
                {abbreviateNumber(severityCounts?.[key] ?? 0)}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

const Widgets = () => {
  return (
    <Card className="px-[32px] py-[16px] flex gap-[36px]">
      <div className="flex-1">
        <div className="text-h6 dark:text-text-input-value">Total vulnerabilities</div>
        <Suspense
          fallback={
            <div className="flex items-center justify-center min-h-[100px]">
              <CircleSpinner size="md" />
            </div>
          }
        >
          <SeverityCountWidget />
        </Suspense>
      </div>
      <div className="h-[120px] w-[1px] dark:bg-bg-grid-border self-center" />
      <div className="flex-1">
        <div className="text-h6 dark:text-text-input-value">Top 5 vulnerabilities</div>
        <div className="flex flex-col gap-1 pt-3">
          {[
            {
              cveId: 'CVE-2018-1000122',
              severity: 'critical',
              cveCVSSScore: 9,
            },
            {
              cveId: 'CVE-2018-1000123',
              severity: 'critical',
              cveCVSSScore: 1,
            },
            {
              cveId: 'CVE-2018-1000124',
              severity: 'critical',
              cveCVSSScore: 4,
            },
            {
              cveId: 'CVE-2018-1000125',
              severity: 'critical',
              cveCVSSScore: 7,
            },
            {
              cveId: 'CVE-2018-1000126',
              severity: 'critical',
              cveCVSSScore: 9,
            },
          ].map((item) => {
            return (
              <div
                className="flex items-center justify-between max-w-[400px]"
                key={item.cveId}
              >
                <div className="flex items-center gap-3">
                  <div className="w-[14px] h-[14px] dark:text-df-gray-500">
                    <VulnerabilityIcon />
                  </div>
                  <div className="dark:text-text-text-and-icon text-p7 truncate">
                    {item.cveId}
                  </div>
                </div>
                <div>
                  <CveCVSSScore score={item.cveCVSSScore} />
                </div>
                <div>
                  <SeverityBadge severity={item.severity} />
                </div>
              </div>
            );
          })}
        </div>
      </div>
      <div className="h-[120px] w-[1px] dark:bg-bg-grid-border self-center" />
      <div className="flex-1">
        <div className="text-h6 dark:text-text-input-value">Scan history</div>
      </div>
    </Card>
  );
};

const VulnerabilityScanResults = () => {
  return (
    <>
      <Suspense
        fallback={
          <HeaderSkeleton
            RightSkeleton={
              <>
                <TimestampSkeleton />
                <SquareSkeleton />
                <SquareSkeleton />
              </>
            }
            LeftSkeleton={
              <>
                <RectSkeleton width="w-40" height="h-4" />
                <RectSkeleton width="w-40" height="h-4" />
                <RectSkeleton width="w-40" height="h-4" />
              </>
            }
          />
        }
      >
        <HeaderComponent />
      </Suspense>
      <div className="p-[16px]">
        <Widgets />
      </div>

      <div className="px-[16px] pb-4">
        <Suspense fallback={<TableSkeleton columns={7} rows={15} size={'default'} />}>
          <CVETable />
        </Suspense>
      </div>
      <Outlet />
    </>
  );
};

export const module = {
  action,
  element: <VulnerabilityScanResults />,
};

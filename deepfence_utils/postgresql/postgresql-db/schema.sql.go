// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: schema.sql

package postgresql_db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createApiToken = `-- name: CreateApiToken :one
INSERT INTO api_token (api_token, name, company_id, role_id, group_id, created_by_user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, api_token, name, company_id, group_id, role_id, created_by_user_id, created_at, updated_at
`

type CreateApiTokenParams struct {
	ApiToken        uuid.UUID
	Name            string
	CompanyID       int32
	RoleID          int32
	GroupID         int32
	CreatedByUserID int32
}

func (q *Queries) CreateApiToken(ctx context.Context, arg CreateApiTokenParams) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, createApiToken,
		arg.ApiToken,
		arg.Name,
		arg.CompanyID,
		arg.RoleID,
		arg.GroupID,
		arg.CreatedByUserID,
	)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.ApiToken,
		&i.Name,
		&i.CompanyID,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (name, email_domain)
VALUES ($1, $2)
RETURNING id, name, email_domain, created_at, updated_at
`

type CreateCompanyParams struct {
	Name        string
	EmailDomain string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, arg.Name, arg.EmailDomain)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO role (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, email, role_id, group_ids, company_id, password_hash, is_active,
                   password_invalidated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, first_name, last_name, email, role_id, group_ids, company_id, password_hash, is_active, password_invalidated, created_at, updated_at
`

type CreateUserParams struct {
	FirstName           string
	LastName            string
	Email               string
	RoleID              int32
	GroupIds            json.RawMessage
	CompanyID           int32
	PasswordHash        string
	IsActive            bool
	PasswordInvalidated bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.RoleID,
		arg.GroupIds,
		arg.CompanyID,
		arg.PasswordHash,
		arg.IsActive,
		arg.PasswordInvalidated,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.RoleID,
		&i.GroupIds,
		&i.CompanyID,
		&i.PasswordHash,
		&i.IsActive,
		&i.PasswordInvalidated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserGroup = `-- name: CreateUserGroup :one
INSERT INTO user_group (name, company_id, is_system)
VALUES ($1, $2, $3)
RETURNING id, name, is_system, company_id, created_at, updated_at
`

type CreateUserGroupParams struct {
	Name      string
	CompanyID int32
	IsSystem  bool
}

func (q *Queries) CreateUserGroup(ctx context.Context, arg CreateUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, createUserGroup, arg.Name, arg.CompanyID, arg.IsSystem)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApiToken = `-- name: DeleteApiToken :exec
DELETE
FROM api_token
WHERE id = $1
`

func (q *Queries) DeleteApiToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteApiToken, id)
	return err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE
FROM company
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getApiToken = `-- name: GetApiToken :one
SELECT id, api_token, name, company_id, group_id, role_id, created_by_user_id, created_at, updated_at
FROM api_token
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetApiToken(ctx context.Context, id int64) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, getApiToken, id)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.ApiToken,
		&i.Name,
		&i.CompanyID,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getApiTokens = `-- name: GetApiTokens :many
SELECT id, api_token, name, company_id, group_id, role_id, created_by_user_id, created_at, updated_at
FROM api_token
WHERE company_id = $1
ORDER BY name
`

func (q *Queries) GetApiTokens(ctx context.Context, companyID int32) ([]ApiToken, error) {
	rows, err := q.db.QueryContext(ctx, getApiTokens, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiToken
	for rows.Next() {
		var i ApiToken
		if err := rows.Scan(
			&i.ID,
			&i.ApiToken,
			&i.Name,
			&i.CompanyID,
			&i.GroupID,
			&i.RoleID,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, name, email_domain, created_at, updated_at
FROM company
ORDER BY name
`

func (q *Queries) GetCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EmailDomain,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, email_domain, created_at, updated_at
FROM company
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByDomain = `-- name: GetCompanyByDomain :one
SELECT id, name, email_domain, created_at, updated_at
FROM company
WHERE email_domain = $1
LIMIT 1
`

func (q *Queries) GetCompanyByDomain(ctx context.Context, emailDomain string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByDomain, emailDomain)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, created_at, updated_at
FROM role
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, created_at, updated_at
FROM role
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name, created_at, updated_at
FROM role
ORDER BY name
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, role_id, group_ids, company_id, password_hash, is_active, password_invalidated, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.RoleID,
		&i.GroupIds,
		&i.CompanyID,
		&i.PasswordHash,
		&i.IsActive,
		&i.PasswordInvalidated,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroupByID = `-- name: GetUserGroupByID :one
SELECT id, name, is_system, company_id, created_at, updated_at
FROM user_group
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserGroupByID(ctx context.Context, id int32) (UserGroup, error) {
	row := q.db.QueryRowContext(ctx, getUserGroupByID, id)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroups = `-- name: GetUserGroups :many
SELECT id, name, is_system, company_id, created_at, updated_at
FROM user_group
WHERE company_id = $1
ORDER BY name
`

func (q *Queries) GetUserGroups(ctx context.Context, companyID int32) ([]UserGroup, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroups, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserGroup
	for rows.Next() {
		var i UserGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsSystem,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, first_name, last_name, email, role_id, group_ids, company_id, password_hash, is_active, password_invalidated, created_at, updated_at
FROM users
WHERE company_id = $1
ORDER BY first_name
`

func (q *Queries) GetUsers(ctx context.Context, companyID int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.RoleID,
			&i.GroupIds,
			&i.CompanyID,
			&i.PasswordHash,
			&i.IsActive,
			&i.PasswordInvalidated,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

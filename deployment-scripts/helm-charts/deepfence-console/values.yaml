# Default values for deepfence-console.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

imagePullSecret:
  # Specifies whether a image pull secret should be created
  create: false
  registry: "https://index.docker.io/v1/"
  username: ""
  password: ""
  # The name of the imagePullSecret to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

kafka:
  # Specifies whether a kafka cluster should be created
  create: true
  # if create false provide name of the existing secret 
  # secret format refer templates/console-secrets/kafka.yaml
  secretName: ""
  # if create true then below values are used to create kafka cluster
  replicaCount: 1 # recommended 3 for high availability kafka
  image:
    repository: deepfenceio/deepfence_kafka_broker_ce
    pullPolicy: Always
    tag: v2
  storageUUID: hNQ55qppT5GGybF52ZGlOQ
  storageClass: ""
  volumeSize: 30G
  resources:
    limits:
      # cpu: 100m
      memory: 4000Mi
    requests:
      # cpu: 100m
      memory: 1000Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  # Specifies whether a postgres database instance should be created
  create: true
  # if create false provide name of the existing secret 
  # secret format refer templates/console-secrets/postgresql.yaml
  secretName: ""
  # if create true then below values are used to create postgres database instance
  secrets:
    POSTGRES_PASSWORD: deepfence
    POSTGRES_USER: deepfence
    POSTGRES_DB: users
  replicaCount: 1
  image:
    repository: postgres
    pullPolicy: Always
    tag: 15-alpine
  storageClass: ""
  volumeSize: 10G
  resources:
    limits:
      # cpu: 100m
      memory: 2000Mi
    requests:
      # cpu: 100m
      memory: 512Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

redis:
  # Specifies whether a postgres database instance should be created
  create: true
  # if create false provide name of the existing secret 
  # secret format refer templates/console-secrets/redis.yaml
  secretName: ""
  # if create true then below values are used to create postgres database instance 
  image:
    repository: redis
    pullPolicy: Always
    tag: 7-alpine
  storageClass: ""
  volumeSize: 5G
  resources: 
    limits:
      # cpu: 100m
      memory: 1000Mi
    requests:
      # cpu: 100m
      memory: 128Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

minio:
  # Specifies whether a postgres database instance should be created
  create: true
  # if create false provide name of the existing secret 
  # secret format refer templates/console-secrets/minio.yaml
  secretName: ""
  # if create true then below values are used to create postgres database instance 
  secrets: 
    MINIO_ROOT_USER: deepfence
    MINIO_ROOT_PASSWORD: deepfence
  image:
    repository: deepfenceio/deepfence_file_server_ce
    pullPolicy: Always
    tag: v2
  storageClass: ""
  volumeSize: 30G
  resources:
    limits:
      # cpu: 100m
      memory: 1000Mi
    requests:
      # cpu: 100m
      memory: 128Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

neo4j:
  # Specifies whether a neo4j database instance should be created
  create: true
  # if create false provide name of the existing secret 
  # secret format refer templates/console-secrets/neo4j.yaml
  secretName: ""
  # if create true then below values are used to create neo4j database instance 
  secrets:
    # format should be username/password
    NEO4J_AUTH: neo4j/e16908ffa5b9f8e9d4ed
  config:
    NEO4J_dbms_memory_pagecache_size: 2600m
    NEO4J_dbms_memory_heap_initial__size: 4000m
    NEO4J_dbms_memory_heap_max__size: 4000m
    NEO4JLABS_PLUGINS: '["apoc"]'
  image:
    repository: neo4j
    pullPolicy: Always
    tag: 4.4.12
  storageClass: ""
  volumeSize: 30G
  resources: {}
    # limits:
    #   # cpu: 100m
    #   memory: 5000Mi
    # requests:
    #   # cpu: 100m
    #   memory: 1000Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

router:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_router_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    # useful for configuring loadbalancer options on supported clouds
    annotations: {}  
      # service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    type: LoadBalancer
    httpsPort: 443
    httpPort: 80
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

server:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_server_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
    internalPort: 8081
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

worker:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_worker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

ingester:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_worker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

scheduler:
  image:
    repository: deepfenceio/deepfence_worker_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  service:
    type: ClusterIP
    port: 8080
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ui:
  replicaCount: 1
  image:
    repository: deepfenceio/deepfence_ui_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  service:
    type: ClusterIP
    port: 8081
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

console_agent:
  # Show console vm in management console UI
  enable: true
  image:
    repository: deepfenceio/deepfence_agent_ce
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: v2
  enableGraphReport: true
  clusterName: ""
  mountContainerRuntimeSocket:
    dockerSock: false
    dockerSockPath: "/var/run/docker.sock"                 # Change if socket path is not the following
    containerdSock: true
    containerdSockPath: "/run/containerd/containerd.sock"  # Change if socket path is not the following
    crioSock: false
    crioSockPath: "/var/run/crio/crio.sock"                # Change if socket path is not the following
  resources:
    requests:
      cpu: 50m
      memory: 150Mi
    limits:
      cpu: 2000m
      memory: 2Gi
  nodeSelector: {}
  tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists

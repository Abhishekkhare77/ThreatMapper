/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReportDNSRecord struct for ReportDNSRecord
type ReportDNSRecord struct {
	Forward []string `json:"forward,omitempty"`
	Reverse []string `json:"reverse,omitempty"`
}

// NewReportDNSRecord instantiates a new ReportDNSRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportDNSRecord() *ReportDNSRecord {
	this := ReportDNSRecord{}
	return &this
}

// NewReportDNSRecordWithDefaults instantiates a new ReportDNSRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportDNSRecordWithDefaults() *ReportDNSRecord {
	this := ReportDNSRecord{}
	return &this
}

// GetForward returns the Forward field value if set, zero value otherwise.
func (o *ReportDNSRecord) GetForward() []string {
	if o == nil || isNil(o.Forward) {
		var ret []string
		return ret
	}
	return o.Forward
}

// GetForwardOk returns a tuple with the Forward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportDNSRecord) GetForwardOk() ([]string, bool) {
	if o == nil || isNil(o.Forward) {
    return nil, false
	}
	return o.Forward, true
}

// HasForward returns a boolean if a field has been set.
func (o *ReportDNSRecord) HasForward() bool {
	if o != nil && !isNil(o.Forward) {
		return true
	}

	return false
}

// SetForward gets a reference to the given []string and assigns it to the Forward field.
func (o *ReportDNSRecord) SetForward(v []string) {
	o.Forward = v
}

// GetReverse returns the Reverse field value if set, zero value otherwise.
func (o *ReportDNSRecord) GetReverse() []string {
	if o == nil || isNil(o.Reverse) {
		var ret []string
		return ret
	}
	return o.Reverse
}

// GetReverseOk returns a tuple with the Reverse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportDNSRecord) GetReverseOk() ([]string, bool) {
	if o == nil || isNil(o.Reverse) {
    return nil, false
	}
	return o.Reverse, true
}

// HasReverse returns a boolean if a field has been set.
func (o *ReportDNSRecord) HasReverse() bool {
	if o != nil && !isNil(o.Reverse) {
		return true
	}

	return false
}

// SetReverse gets a reference to the given []string and assigns it to the Reverse field.
func (o *ReportDNSRecord) SetReverse(v []string) {
	o.Reverse = v
}

func (o ReportDNSRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Forward) {
		toSerialize["forward"] = o.Forward
	}
	if !isNil(o.Reverse) {
		toSerialize["reverse"] = o.Reverse
	}
	return json.Marshal(toSerialize)
}

type NullableReportDNSRecord struct {
	value *ReportDNSRecord
	isSet bool
}

func (v NullableReportDNSRecord) Get() *ReportDNSRecord {
	return v.value
}

func (v *NullableReportDNSRecord) Set(val *ReportDNSRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableReportDNSRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableReportDNSRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportDNSRecord(val *ReportDNSRecord) *NullableReportDNSRecord {
	return &NullableReportDNSRecord{value: val, isSet: true}
}

func (v NullableReportDNSRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportDNSRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



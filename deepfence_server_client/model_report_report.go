/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReportReport struct for ReportReport
type ReportReport struct {
	DNS *map[string]ReportDNSRecord `json:"DNS,omitempty"`
	Nodes *map[string]ReportDNSRecord `json:"nodes,omitempty"`
}

// NewReportReport instantiates a new ReportReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportReport() *ReportReport {
	this := ReportReport{}
	return &this
}

// NewReportReportWithDefaults instantiates a new ReportReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportReportWithDefaults() *ReportReport {
	this := ReportReport{}
	return &this
}

// GetDNS returns the DNS field value if set, zero value otherwise.
func (o *ReportReport) GetDNS() map[string]ReportDNSRecord {
	if o == nil || isNil(o.DNS) {
		var ret map[string]ReportDNSRecord
		return ret
	}
	return *o.DNS
}

// GetDNSOk returns a tuple with the DNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportReport) GetDNSOk() (*map[string]ReportDNSRecord, bool) {
	if o == nil || isNil(o.DNS) {
    return nil, false
	}
	return o.DNS, true
}

// HasDNS returns a boolean if a field has been set.
func (o *ReportReport) HasDNS() bool {
	if o != nil && !isNil(o.DNS) {
		return true
	}

	return false
}

// SetDNS gets a reference to the given map[string]ReportDNSRecord and assigns it to the DNS field.
func (o *ReportReport) SetDNS(v map[string]ReportDNSRecord) {
	o.DNS = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *ReportReport) GetNodes() map[string]ReportDNSRecord {
	if o == nil || isNil(o.Nodes) {
		var ret map[string]ReportDNSRecord
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportReport) GetNodesOk() (*map[string]ReportDNSRecord, bool) {
	if o == nil || isNil(o.Nodes) {
    return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ReportReport) HasNodes() bool {
	if o != nil && !isNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given map[string]ReportDNSRecord and assigns it to the Nodes field.
func (o *ReportReport) SetNodes(v map[string]ReportDNSRecord) {
	o.Nodes = &v
}

func (o ReportReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DNS) {
		toSerialize["DNS"] = o.DNS
	}
	if !isNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	return json.Marshal(toSerialize)
}

type NullableReportReport struct {
	value *ReportReport
	isSet bool
}

func (v NullableReportReport) Get() *ReportReport {
	return v.value
}

func (v *NullableReportReport) Set(val *ReportReport) {
	v.value = val
	v.isSet = true
}

func (v NullableReportReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReportReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportReport(val *ReportReport) *NullableReportReport {
	return &NullableReportReport{value: val, isSet: true}
}

func (v NullableReportReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



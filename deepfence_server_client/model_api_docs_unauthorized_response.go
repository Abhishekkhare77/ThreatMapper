/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiDocsUnauthorizedResponse struct for ApiDocsUnauthorizedResponse
type ApiDocsUnauthorizedResponse struct {
	Id *string `json:"id,omitempty"`
}

// NewApiDocsUnauthorizedResponse instantiates a new ApiDocsUnauthorizedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDocsUnauthorizedResponse() *ApiDocsUnauthorizedResponse {
	this := ApiDocsUnauthorizedResponse{}
	return &this
}

// NewApiDocsUnauthorizedResponseWithDefaults instantiates a new ApiDocsUnauthorizedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDocsUnauthorizedResponseWithDefaults() *ApiDocsUnauthorizedResponse {
	this := ApiDocsUnauthorizedResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiDocsUnauthorizedResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDocsUnauthorizedResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiDocsUnauthorizedResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiDocsUnauthorizedResponse) SetId(v string) {
	o.Id = &v
}

func (o ApiDocsUnauthorizedResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableApiDocsUnauthorizedResponse struct {
	value *ApiDocsUnauthorizedResponse
	isSet bool
}

func (v NullableApiDocsUnauthorizedResponse) Get() *ApiDocsUnauthorizedResponse {
	return v.value
}

func (v *NullableApiDocsUnauthorizedResponse) Set(val *ApiDocsUnauthorizedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDocsUnauthorizedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDocsUnauthorizedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDocsUnauthorizedResponse(val *ApiDocsUnauthorizedResponse) *NullableApiDocsUnauthorizedResponse {
	return &NullableApiDocsUnauthorizedResponse{value: val, isSet: true}
}

func (v NullableApiDocsUnauthorizedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDocsUnauthorizedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


